
GelMABioprinter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f70  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080020f8  080020f8  000030f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002108  08002108  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002108  08002108  00003108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002110  08002110  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002110  08002110  00003110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002114  08002114  00003114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002118  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000504  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000510  20000510  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007077  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000152b  00000000  00000000  0000b0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  0000c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000538  00000000  00000000  0000cce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f5fd  00000000  00000000  0000d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008498  00000000  00000000  0002c81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be863  00000000  00000000  00034cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f3518  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c64  00000000  00000000  000f355c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  000f51c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080020e0 	.word	0x080020e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080020e0 	.word	0x080020e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fa7a 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f806 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f89e 	bl	8000604 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004c8:	f000 f86e 	bl	80005a8 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <main+0x14>

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b094      	sub	sp, #80	@ 0x50
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0320 	add.w	r3, r7, #32
 80004da:	2230      	movs	r2, #48	@ 0x30
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 fdd2 	bl	8002088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	4b29      	ldr	r3, [pc, #164]	@ (80005a0 <SystemClock_Config+0xd0>)
 80004fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004fc:	4a28      	ldr	r2, [pc, #160]	@ (80005a0 <SystemClock_Config+0xd0>)
 80004fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000502:	6413      	str	r3, [r2, #64]	@ 0x40
 8000504:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <SystemClock_Config+0xd0>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	4b23      	ldr	r3, [pc, #140]	@ (80005a4 <SystemClock_Config+0xd4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a22      	ldr	r2, [pc, #136]	@ (80005a4 <SystemClock_Config+0xd4>)
 800051a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4b20      	ldr	r3, [pc, #128]	@ (80005a4 <SystemClock_Config+0xd4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800052c:	2303      	movs	r3, #3
 800052e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000530:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000534:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	2301      	movs	r3, #1
 8000538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053a:	2310      	movs	r3, #16
 800053c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000548:	230f      	movs	r3, #15
 800054a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800054c:	2390      	movs	r3, #144	@ 0x90
 800054e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000550:	2302      	movs	r3, #2
 8000552:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000554:	2305      	movs	r3, #5
 8000556:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0320 	add.w	r3, r7, #32
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fe69 	bl	8001234 <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000568:	f000 f93e 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	230f      	movs	r3, #15
 800056e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f001 f8cc 	bl	8001724 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000592:	f000 f929 	bl	80007e8 <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3750      	adds	r7, #80	@ 0x50
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40007000 	.word	0x40007000

080005a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005bc:	2202      	movs	r2, #2
 80005be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005c8:	2202      	movs	r2, #2
 80005ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80005d8:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	@ (8000600 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80005ec:	f000 fd13 	bl	8001016 <HAL_PCD_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80005f6:	f000 f8f7 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000028 	.word	0x20000028

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08c      	sub	sp, #48	@ 0x30
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
 800061e:	4b6c      	ldr	r3, [pc, #432]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a6b      	ldr	r2, [pc, #428]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 8000624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b69      	ldr	r3, [pc, #420]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000632:	61bb      	str	r3, [r7, #24]
 8000634:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	4b65      	ldr	r3, [pc, #404]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a64      	ldr	r2, [pc, #400]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b62      	ldr	r3, [pc, #392]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	4b5e      	ldr	r3, [pc, #376]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a5d      	ldr	r2, [pc, #372]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b5b      	ldr	r3, [pc, #364]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	4b57      	ldr	r3, [pc, #348]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a56      	ldr	r2, [pc, #344]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b54      	ldr	r3, [pc, #336]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	4b50      	ldr	r3, [pc, #320]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a4f      	ldr	r2, [pc, #316]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 8000694:	f043 0310 	orr.w	r3, r3, #16
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b4d      	ldr	r3, [pc, #308]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0310 	and.w	r3, r3, #16
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b49      	ldr	r3, [pc, #292]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a48      	ldr	r2, [pc, #288]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 80006b0:	f043 0308 	orr.w	r3, r3, #8
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b46      	ldr	r3, [pc, #280]	@ (80007d0 <MX_GPIO_Init+0x1cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0308 	and.w	r3, r3, #8
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2108      	movs	r1, #8
 80006c6:	4843      	ldr	r0, [pc, #268]	@ (80007d4 <MX_GPIO_Init+0x1d0>)
 80006c8:	f000 fc8c 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80006d2:	4841      	ldr	r0, [pc, #260]	@ (80007d8 <MX_GPIO_Init+0x1d4>)
 80006d4:	f000 fc86 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2106      	movs	r1, #6
 80006dc:	483f      	ldr	r0, [pc, #252]	@ (80007dc <MX_GPIO_Init+0x1d8>)
 80006de:	f000 fc81 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80006e2:	2200      	movs	r2, #0
 80006e4:	f64f 7180 	movw	r1, #65408	@ 0xff80
 80006e8:	483d      	ldr	r0, [pc, #244]	@ (80007e0 <MX_GPIO_Init+0x1dc>)
 80006ea:	f000 fc7b 	bl	8000fe4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006f4:	483b      	ldr	r0, [pc, #236]	@ (80007e4 <MX_GPIO_Init+0x1e0>)
 80006f6:	f000 fc75 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	21c0      	movs	r1, #192	@ 0xc0
 80006fe:	4836      	ldr	r0, [pc, #216]	@ (80007d8 <MX_GPIO_Init+0x1d4>)
 8000700:	f000 fc70 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000704:	230f      	movs	r3, #15
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070c:	2301      	movs	r3, #1
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4830      	ldr	r0, [pc, #192]	@ (80007d8 <MX_GPIO_Init+0x1d4>)
 8000718:	f000 fac8 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800071c:	2308      	movs	r3, #8
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4828      	ldr	r0, [pc, #160]	@ (80007d4 <MX_GPIO_Init+0x1d0>)
 8000734:	f000 faba 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000738:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4821      	ldr	r0, [pc, #132]	@ (80007d8 <MX_GPIO_Init+0x1d4>)
 8000752:	f000 faab 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000756:	2306      	movs	r3, #6
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	481b      	ldr	r0, [pc, #108]	@ (80007dc <MX_GPIO_Init+0x1d8>)
 800076e:	f000 fa9d 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000772:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000776:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	4815      	ldr	r0, [pc, #84]	@ (80007e0 <MX_GPIO_Init+0x1dc>)
 800078c:	f000 fa8e 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000790:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	480e      	ldr	r0, [pc, #56]	@ (80007e4 <MX_GPIO_Init+0x1e0>)
 80007aa:	f000 fa7f 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <MX_GPIO_Init+0x1e0>)
 80007c4:	f000 fa72 	bl	8000cac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c8:	bf00      	nop
 80007ca:	3730      	adds	r7, #48	@ 0x30
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020800 	.word	0x40020800
 80007dc:	40020400 	.word	0x40020400
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40020c00 	.word	0x40020c00

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <Error_Handler+0x8>

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000802:	4a0f      	ldr	r2, [pc, #60]	@ (8000840 <HAL_MspInit+0x4c>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000808:	6453      	str	r3, [r2, #68]	@ 0x44
 800080a:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	@ 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000864:	d132      	bne.n	80008cc <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <HAL_PCD_MspInit+0x90>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a19      	ldr	r2, [pc, #100]	@ (80008d4 <HAL_PCD_MspInit+0x90>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <HAL_PCD_MspInit+0x90>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000882:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000894:	230a      	movs	r3, #10
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480e      	ldr	r0, [pc, #56]	@ (80008d8 <HAL_PCD_MspInit+0x94>)
 80008a0:	f000 fa04 	bl	8000cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80008a4:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <HAL_PCD_MspInit+0x90>)
 80008a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008a8:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <HAL_PCD_MspInit+0x90>)
 80008aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <HAL_PCD_MspInit+0x90>)
 80008b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b8:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <HAL_PCD_MspInit+0x90>)
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008be:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c0:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <HAL_PCD_MspInit+0x90>)
 80008c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	@ 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <NMI_Handler+0x4>

080008e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <MemManage_Handler+0x4>

080008f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <UsageFault_Handler+0x4>

08000904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000932:	f000 f891 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <SystemInit+0x20>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000946:	4a05      	ldr	r2, [pc, #20]	@ (800095c <SystemInit+0x20>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000960:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000998 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000964:	f7ff ffea 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000968:	480c      	ldr	r0, [pc, #48]	@ (800099c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800096a:	490d      	ldr	r1, [pc, #52]	@ (80009a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800096c:	4a0d      	ldr	r2, [pc, #52]	@ (80009a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000980:	4c0a      	ldr	r4, [pc, #40]	@ (80009ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098e:	f001 fb83 	bl	8002098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000992:	f7ff fd91 	bl	80004b8 <main>
  bx  lr    
 8000996:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a4:	08002118 	.word	0x08002118
  ldr r2, =_sbss
 80009a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ac:	20000510 	.word	0x20000510

080009b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b8:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0d      	ldr	r2, [pc, #52]	@ (80009f4 <HAL_Init+0x40>)
 80009be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c4:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <HAL_Init+0x40>)
 80009ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	@ (80009f4 <HAL_Init+0x40>)
 80009d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f931 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	200f      	movs	r0, #15
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff ff04 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023c00 	.word	0x40023c00

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f93b 	bl	8000c92 <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f911 	bl	8000c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	@ (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	2000050c 	.word	0x2000050c

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	2000050c 	.word	0x2000050c

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff ffee 	bl	8000a80 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000abe:	bf00      	nop
 8000ac0:	f7ff ffde 	bl	8000a80 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	@ (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	@ (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	@ 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	@ 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f7ff ff8e 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff47 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6c:	f7ff ff5c 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ff8e 	bl	8000b98 <NVIC_EncodePriority>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff5d 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffb0 	bl	8000c00 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e16b      	b.n	8000fa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f040 815a 	bne.w	8000f9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d005      	beq.n	8000cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d130      	bne.n	8000d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	f003 0201 	and.w	r2, r3, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d017      	beq.n	8000d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d123      	bne.n	8000df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	69b9      	ldr	r1, [r7, #24]
 8000dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0203 	and.w	r2, r3, #3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 80b4 	beq.w	8000f9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b60      	ldr	r3, [pc, #384]	@ (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e42:	4b5d      	ldr	r3, [pc, #372]	@ (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4e:	4a5b      	ldr	r2, [pc, #364]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a52      	ldr	r2, [pc, #328]	@ (8000fc0 <HAL_GPIO_Init+0x314>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d02b      	beq.n	8000ed2 <HAL_GPIO_Init+0x226>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a51      	ldr	r2, [pc, #324]	@ (8000fc4 <HAL_GPIO_Init+0x318>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d025      	beq.n	8000ece <HAL_GPIO_Init+0x222>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a50      	ldr	r2, [pc, #320]	@ (8000fc8 <HAL_GPIO_Init+0x31c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d01f      	beq.n	8000eca <HAL_GPIO_Init+0x21e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8000fcc <HAL_GPIO_Init+0x320>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d019      	beq.n	8000ec6 <HAL_GPIO_Init+0x21a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4e      	ldr	r2, [pc, #312]	@ (8000fd0 <HAL_GPIO_Init+0x324>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x216>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8000fd4 <HAL_GPIO_Init+0x328>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x212>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd8 <HAL_GPIO_Init+0x32c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x20e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4b      	ldr	r2, [pc, #300]	@ (8000fdc <HAL_GPIO_Init+0x330>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x20a>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e00e      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	e00c      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000eba:	2306      	movs	r3, #6
 8000ebc:	e00a      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	e008      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e004      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	69fa      	ldr	r2, [r7, #28]
 8000ed6:	f002 0203 	and.w	r2, r2, #3
 8000eda:	0092      	lsls	r2, r2, #2
 8000edc:	4093      	lsls	r3, r2
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee4:	4935      	ldr	r1, [pc, #212]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f16:	4a32      	ldr	r2, [pc, #200]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f40:	4a27      	ldr	r2, [pc, #156]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f46:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f94:	4a12      	ldr	r2, [pc, #72]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	f67f ae90 	bls.w	8000cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	40021c00 	.word	0x40021c00
 8000fe0:	40013c00 	.word	0x40013c00

08000fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	041a      	lsls	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	619a      	str	r2, [r3, #24]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af02      	add	r7, sp, #8
 800101c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e101      	b.n	800122c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d106      	bne.n	8001048 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fbfe 	bl	8000844 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2203      	movs	r2, #3
 800104c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001056:	d102      	bne.n	800105e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fd6e 	bl	8001b44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7c1a      	ldrb	r2, [r3, #16]
 8001070:	f88d 2000 	strb.w	r2, [sp]
 8001074:	3304      	adds	r3, #4
 8001076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001078:	f000 fd00 	bl	8001a7c <USB_CoreInit>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2202      	movs	r2, #2
 8001086:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e0ce      	b.n	800122c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fd66 	bl	8001b66 <USB_SetCurrentMode>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2202      	movs	r2, #2
 80010a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0bf      	b.n	800122c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e04a      	b.n	8001148 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3315      	adds	r3, #21
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	3314      	adds	r3, #20
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	b298      	uxth	r0, r3
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	332e      	adds	r3, #46	@ 0x2e
 80010ee:	4602      	mov	r2, r0
 80010f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	3318      	adds	r3, #24
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	331c      	adds	r3, #28
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	3320      	adds	r3, #32
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	3324      	adds	r3, #36	@ 0x24
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	3301      	adds	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	791b      	ldrb	r3, [r3, #4]
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	429a      	cmp	r2, r3
 8001150:	d3af      	bcc.n	80010b2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e044      	b.n	80011e2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011c6:	7bfa      	ldrb	r2, [r7, #15]
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	3301      	adds	r3, #1
 80011e0:	73fb      	strb	r3, [r7, #15]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	791b      	ldrb	r3, [r3, #4]
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d3b5      	bcc.n	8001158 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7c1a      	ldrb	r2, [r3, #16]
 80011f4:	f88d 2000 	strb.w	r2, [sp]
 80011f8:	3304      	adds	r3, #4
 80011fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011fc:	f000 fd00 	bl	8001c00 <USB_DevInit>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2202      	movs	r2, #2
 800120a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00c      	b.n	800122c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fec8 	bl	8001fba <USB_DevDisconnect>

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e267      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d075      	beq.n	800133e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001252:	4b88      	ldr	r3, [pc, #544]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d00c      	beq.n	8001278 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4b85      	ldr	r3, [pc, #532]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001266:	2b08      	cmp	r3, #8
 8001268:	d112      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b82      	ldr	r3, [pc, #520]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001272:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b7e      	ldr	r3, [pc, #504]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d05b      	beq.n	800133c <HAL_RCC_OscConfig+0x108>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d157      	bne.n	800133c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e242      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x74>
 800129a:	4b76      	ldr	r3, [pc, #472]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a75      	ldr	r2, [pc, #468]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4b70      	ldr	r3, [pc, #448]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b6d      	ldr	r3, [pc, #436]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6c      	ldr	r2, [pc, #432]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012cc:	4b69      	ldr	r3, [pc, #420]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a68      	ldr	r2, [pc, #416]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a65      	ldr	r2, [pc, #404]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fbc8 	bl	8000a80 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fbc4 	bl	8000a80 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	@ 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e207      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b5b      	ldr	r3, [pc, #364]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xc0>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fbb4 	bl	8000a80 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fbb0 	bl	8000a80 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	@ 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1f3      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b51      	ldr	r3, [pc, #324]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0xe8>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d063      	beq.n	8001412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800134a:	4b4a      	ldr	r3, [pc, #296]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b47      	ldr	r3, [pc, #284]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800135e:	2b08      	cmp	r3, #8
 8001360:	d11c      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b44      	ldr	r3, [pc, #272]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d116      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	4b41      	ldr	r3, [pc, #260]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e1c7      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4937      	ldr	r1, [pc, #220]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	e03a      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a4:	4b34      	ldr	r3, [pc, #208]	@ (8001478 <HAL_RCC_OscConfig+0x244>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fb69 	bl	8000a80 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fb65 	bl	8000a80 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1a8      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4925      	ldr	r1, [pc, #148]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <HAL_RCC_OscConfig+0x244>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fb48 	bl	8000a80 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fb44 	bl	8000a80 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e187      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d036      	beq.n	800148c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d016      	beq.n	8001454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_RCC_OscConfig+0x248>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fb28 	bl	8000a80 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fb24 	bl	8000a80 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e167      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x200>
 8001452:	e01b      	b.n	800148c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_RCC_OscConfig+0x248>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fb11 	bl	8000a80 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	e00e      	b.n	8001480 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fb0d 	bl	8000a80 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d907      	bls.n	8001480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e150      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 8001474:	40023800 	.word	0x40023800
 8001478:	42470000 	.word	0x42470000
 800147c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b88      	ldr	r3, [pc, #544]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ea      	bne.n	8001462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8097 	beq.w	80015c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b81      	ldr	r3, [pc, #516]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b7d      	ldr	r3, [pc, #500]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a7c      	ldr	r2, [pc, #496]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	4b7a      	ldr	r3, [pc, #488]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b77      	ldr	r3, [pc, #476]	@ (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b74      	ldr	r3, [pc, #464]	@ (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a73      	ldr	r2, [pc, #460]	@ (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff facd 	bl	8000a80 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fac9 	bl	8000a80 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e10c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	4b6a      	ldr	r3, [pc, #424]	@ (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x2ea>
 8001510:	4b64      	ldr	r3, [pc, #400]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001514:	4a63      	ldr	r2, [pc, #396]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	@ 0x70
 800151c:	e01c      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b05      	cmp	r3, #5
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x30c>
 8001526:	4b5f      	ldr	r3, [pc, #380]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152a:	4a5e      	ldr	r2, [pc, #376]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6713      	str	r3, [r2, #112]	@ 0x70
 8001532:	4b5c      	ldr	r3, [pc, #368]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001536:	4a5b      	ldr	r2, [pc, #364]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	@ 0x70
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 8001540:	4b58      	ldr	r3, [pc, #352]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001544:	4a57      	ldr	r2, [pc, #348]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6713      	str	r3, [r2, #112]	@ 0x70
 800154c:	4b55      	ldr	r3, [pc, #340]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001550:	4a54      	ldr	r2, [pc, #336]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001552:	f023 0304 	bic.w	r3, r3, #4
 8001556:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d015      	beq.n	800158c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fa8e 	bl	8000a80 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fa8a 	bl	8000a80 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0cb      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	4b49      	ldr	r3, [pc, #292]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0ee      	beq.n	8001568 <HAL_RCC_OscConfig+0x334>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fa78 	bl	8000a80 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff fa74 	bl	8000a80 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0b5      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	4b3e      	ldr	r3, [pc, #248]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ee      	bne.n	8001594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015bc:	4b39      	ldr	r3, [pc, #228]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	4a38      	ldr	r2, [pc, #224]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a1 	beq.w	8001714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d2:	4b34      	ldr	r3, [pc, #208]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d05c      	beq.n	8001698 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d141      	bne.n	800166a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b31      	ldr	r3, [pc, #196]	@ (80016ac <HAL_RCC_OscConfig+0x478>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fa48 	bl	8000a80 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fa44 	bl	8000a80 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e087      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001634:	061b      	lsls	r3, r3, #24
 8001636:	491b      	ldr	r1, [pc, #108]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <HAL_RCC_OscConfig+0x478>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fa1d 	bl	8000a80 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fa19 	bl	8000a80 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e05c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x416>
 8001668:	e054      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <HAL_RCC_OscConfig+0x478>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fa06 	bl	8000a80 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fa02 	bl	8000a80 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e045      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x444>
 8001696:	e03d      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e038      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000
 80016ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <HAL_RCC_OscConfig+0x4ec>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d028      	beq.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d121      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d11a      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0cc      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b68      	ldr	r3, [pc, #416]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d90c      	bls.n	8001760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b65      	ldr	r3, [pc, #404]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a58      	ldr	r2, [pc, #352]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001782:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a52      	ldr	r2, [pc, #328]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800179a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d044      	beq.n	8001844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e067      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b37      	ldr	r3, [pc, #220]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4934      	ldr	r1, [pc, #208]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff f934 	bl	8000a80 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7ff f930 	bl	8000a80 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e04f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b25      	ldr	r3, [pc, #148]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d20c      	bcs.n	800186c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f894 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	080020f8 	.word	0x080020f8
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f4:	b090      	sub	sp, #64	@ 0x40
 80018f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001908:	4b59      	ldr	r3, [pc, #356]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d00d      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x40>
 8001914:	2b08      	cmp	r3, #8
 8001916:	f200 80a1 	bhi.w	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x34>
 800191e:	2b04      	cmp	r3, #4
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x3a>
 8001922:	e09b      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b53      	ldr	r3, [pc, #332]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001926:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001928:	e09b      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192a:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800192c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800192e:	e098      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001930:	4b4f      	ldr	r3, [pc, #316]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001938:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d028      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b4a      	ldr	r3, [pc, #296]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	2200      	movs	r2, #0
 800194e:	623b      	str	r3, [r7, #32]
 8001950:	627a      	str	r2, [r7, #36]	@ 0x24
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001958:	2100      	movs	r1, #0
 800195a:	4b47      	ldr	r3, [pc, #284]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800195c:	fb03 f201 	mul.w	r2, r3, r1
 8001960:	2300      	movs	r3, #0
 8001962:	fb00 f303 	mul.w	r3, r0, r3
 8001966:	4413      	add	r3, r2
 8001968:	4a43      	ldr	r2, [pc, #268]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800196a:	fba0 1202 	umull	r1, r2, r0, r2
 800196e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001970:	460a      	mov	r2, r1
 8001972:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001976:	4413      	add	r3, r2
 8001978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800197a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800197c:	2200      	movs	r2, #0
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	61fa      	str	r2, [r7, #28]
 8001982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800198a:	f7fe fc1d 	bl	80001c8 <__aeabi_uldivmod>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4613      	mov	r3, r2
 8001994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001996:	e053      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001998:	4b35      	ldr	r3, [pc, #212]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	2200      	movs	r2, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	617a      	str	r2, [r7, #20]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019aa:	f04f 0b00 	mov.w	fp, #0
 80019ae:	4652      	mov	r2, sl
 80019b0:	465b      	mov	r3, fp
 80019b2:	f04f 0000 	mov.w	r0, #0
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	0159      	lsls	r1, r3, #5
 80019bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c0:	0150      	lsls	r0, r2, #5
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ebb2 080a 	subs.w	r8, r2, sl
 80019ca:	eb63 090b 	sbc.w	r9, r3, fp
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019e2:	ebb2 0408 	subs.w	r4, r2, r8
 80019e6:	eb63 0509 	sbc.w	r5, r3, r9
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	00eb      	lsls	r3, r5, #3
 80019f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f8:	00e2      	lsls	r2, r4, #3
 80019fa:	4614      	mov	r4, r2
 80019fc:	461d      	mov	r5, r3
 80019fe:	eb14 030a 	adds.w	r3, r4, sl
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	eb45 030b 	adc.w	r3, r5, fp
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a16:	4629      	mov	r1, r5
 8001a18:	028b      	lsls	r3, r1, #10
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a20:	4621      	mov	r1, r4
 8001a22:	028a      	lsls	r2, r1, #10
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	60fa      	str	r2, [r7, #12]
 8001a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a34:	f7fe fbc8 	bl	80001c8 <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a5a:	e002      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3740      	adds	r7, #64	@ 0x40
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	017d7840 	.word	0x017d7840

08001a7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	f107 001c 	add.w	r0, r7, #28
 8001a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001a8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d123      	bne.n	8001ade <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8001aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8001abe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d105      	bne.n	8001ad2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 faa0 	bl	8002018 <USB_CoreReset>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	e01b      	b.n	8001b16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fa94 	bl	8002018 <USB_CoreReset>
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8001af4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d106      	bne.n	8001b0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b08:	e005      	b.n	8001b16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8001b16:	7fbb      	ldrb	r3, [r7, #30]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d10b      	bne.n	8001b34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f043 0206 	orr.w	r2, r3, #6
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f043 0220 	orr.w	r2, r3, #32
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b40:	b004      	add	sp, #16
 8001b42:	4770      	bx	lr

08001b44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 0201 	bic.w	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d115      	bne.n	8001bb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8001b94:	200a      	movs	r0, #10
 8001b96:	f7fe ff7f 	bl	8000a98 <HAL_Delay>
      ms += 10U;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	330a      	adds	r3, #10
 8001b9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fa2b 	bl	8001ffc <USB_GetMode>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d01e      	beq.n	8001bea <USB_SetCurrentMode+0x84>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2bc7      	cmp	r3, #199	@ 0xc7
 8001bb0:	d9f0      	bls.n	8001b94 <USB_SetCurrentMode+0x2e>
 8001bb2:	e01a      	b.n	8001bea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d115      	bne.n	8001be6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8001bc6:	200a      	movs	r0, #10
 8001bc8:	f7fe ff66 	bl	8000a98 <HAL_Delay>
      ms += 10U;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	330a      	adds	r3, #10
 8001bd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fa12 	bl	8001ffc <USB_GetMode>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <USB_SetCurrentMode+0x84>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2bc7      	cmp	r3, #199	@ 0xc7
 8001be2:	d9f0      	bls.n	8001bc6 <USB_SetCurrentMode+0x60>
 8001be4:	e001      	b.n	8001bea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e005      	b.n	8001bf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2bc8      	cmp	r3, #200	@ 0xc8
 8001bee:	d101      	bne.n	8001bf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001c00:	b084      	sub	sp, #16
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	e009      	b.n	8001c34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	3340      	adds	r3, #64	@ 0x40
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	3301      	adds	r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2b0e      	cmp	r3, #14
 8001c38:	d9f2      	bls.n	8001c20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8001c3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d11c      	bne.n	8001c7c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c66:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c72:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c7a:	e00b      	b.n	8001c94 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c80:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ca0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d10d      	bne.n	8001cc4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8001ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d104      	bne.n	8001cba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f968 	bl	8001f88 <USB_SetDevSpeed>
 8001cb8:	e008      	b.n	8001ccc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001cba:	2101      	movs	r1, #1
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f963 	bl	8001f88 <USB_SetDevSpeed>
 8001cc2:	e003      	b.n	8001ccc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001cc4:	2103      	movs	r1, #3
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f95e 	bl	8001f88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001ccc:	2110      	movs	r1, #16
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8fa 	bl	8001ec8 <USB_FlushTxFifo>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f924 	bl	8001f2c <USB_FlushRxFifo>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d00:	461a      	mov	r2, r3
 8001d02:	2300      	movs	r3, #0
 8001d04:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	e043      	b.n	8001da0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d2e:	d118      	bne.n	8001d62 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10a      	bne.n	8001d4c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d42:	461a      	mov	r2, r3
 8001d44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e013      	b.n	8001d74 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	e008      	b.n	8001d74 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d80:	461a      	mov	r2, r3
 8001d82:	2300      	movs	r3, #0
 8001d84:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d92:	461a      	mov	r2, r3
 8001d94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001da4:	461a      	mov	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d3b5      	bcc.n	8001d18 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e043      	b.n	8001e3a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001dc8:	d118      	bne.n	8001dfc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10a      	bne.n	8001de6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e013      	b.n	8001e0e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001df2:	461a      	mov	r2, r3
 8001df4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e008      	b.n	8001e0e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001e32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	3301      	adds	r3, #1
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e3e:	461a      	mov	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d3b5      	bcc.n	8001db2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8001e66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8001e68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f043 0210 	orr.w	r2, r3, #16
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <USB_DevInit+0x2c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8001e88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f043 0208 	orr.w	r2, r3, #8
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8001e9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ec0:	b004      	add	sp, #16
 8001ec2:	4770      	bx	lr
 8001ec4:	803c3800 	.word	0x803c3800

08001ec8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8001ee2:	d901      	bls.n	8001ee8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e01b      	b.n	8001f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	daf2      	bge.n	8001ed6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	019b      	lsls	r3, r3, #6
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8001f0c:	d901      	bls.n	8001f12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e006      	b.n	8001f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d0f0      	beq.n	8001f00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8001f44:	d901      	bls.n	8001f4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e018      	b.n	8001f7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	daf2      	bge.n	8001f38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2210      	movs	r2, #16
 8001f5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8001f68:	d901      	bls.n	8001f6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e006      	b.n	8001f7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d0f0      	beq.n	8001f5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	68f9      	ldr	r1, [r7, #12]
 8001fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8001fd4:	f023 0303 	bic.w	r3, r3, #3
 8001fd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0301 	and.w	r3, r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3301      	adds	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002030:	d901      	bls.n	8002036 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e022      	b.n	800207c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	daf2      	bge.n	8002024 <USB_CoreReset+0xc>

  count = 10U;
 800203e:	230a      	movs	r3, #10
 8002040:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8002042:	e002      	b.n	800204a <USB_CoreReset+0x32>
  {
    count--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3b01      	subs	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f9      	bne.n	8002044 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3301      	adds	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002068:	d901      	bls.n	800206e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e006      	b.n	800207c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d0f0      	beq.n	800205c <USB_CoreReset+0x44>

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <memset>:
 8002088:	4402      	add	r2, r0
 800208a:	4603      	mov	r3, r0
 800208c:	4293      	cmp	r3, r2
 800208e:	d100      	bne.n	8002092 <memset+0xa>
 8002090:	4770      	bx	lr
 8002092:	f803 1b01 	strb.w	r1, [r3], #1
 8002096:	e7f9      	b.n	800208c <memset+0x4>

08002098 <__libc_init_array>:
 8002098:	b570      	push	{r4, r5, r6, lr}
 800209a:	4d0d      	ldr	r5, [pc, #52]	@ (80020d0 <__libc_init_array+0x38>)
 800209c:	4c0d      	ldr	r4, [pc, #52]	@ (80020d4 <__libc_init_array+0x3c>)
 800209e:	1b64      	subs	r4, r4, r5
 80020a0:	10a4      	asrs	r4, r4, #2
 80020a2:	2600      	movs	r6, #0
 80020a4:	42a6      	cmp	r6, r4
 80020a6:	d109      	bne.n	80020bc <__libc_init_array+0x24>
 80020a8:	4d0b      	ldr	r5, [pc, #44]	@ (80020d8 <__libc_init_array+0x40>)
 80020aa:	4c0c      	ldr	r4, [pc, #48]	@ (80020dc <__libc_init_array+0x44>)
 80020ac:	f000 f818 	bl	80020e0 <_init>
 80020b0:	1b64      	subs	r4, r4, r5
 80020b2:	10a4      	asrs	r4, r4, #2
 80020b4:	2600      	movs	r6, #0
 80020b6:	42a6      	cmp	r6, r4
 80020b8:	d105      	bne.n	80020c6 <__libc_init_array+0x2e>
 80020ba:	bd70      	pop	{r4, r5, r6, pc}
 80020bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c0:	4798      	blx	r3
 80020c2:	3601      	adds	r6, #1
 80020c4:	e7ee      	b.n	80020a4 <__libc_init_array+0xc>
 80020c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ca:	4798      	blx	r3
 80020cc:	3601      	adds	r6, #1
 80020ce:	e7f2      	b.n	80020b6 <__libc_init_array+0x1e>
 80020d0:	08002110 	.word	0x08002110
 80020d4:	08002110 	.word	0x08002110
 80020d8:	08002110 	.word	0x08002110
 80020dc:	08002114 	.word	0x08002114

080020e0 <_init>:
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e2:	bf00      	nop
 80020e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020e6:	bc08      	pop	{r3}
 80020e8:	469e      	mov	lr, r3
 80020ea:	4770      	bx	lr

080020ec <_fini>:
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	bf00      	nop
 80020f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f2:	bc08      	pop	{r3}
 80020f4:	469e      	mov	lr, r3
 80020f6:	4770      	bx	lr
