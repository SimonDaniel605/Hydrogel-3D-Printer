
GelMABioprinter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003154  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080032dc  080032dc  000042dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f4  080032f4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080032f4  080032f4  000042f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032fc  080032fc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032fc  080032fc  000042fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003300  08003300  00004300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003304  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000005fc  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000608  20000608  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d16e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e41  00000000  00000000  000121aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  00013ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e2  00000000  00000000  00014cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002052d  00000000  00000000  000156a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4fc  00000000  00000000  00035bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cac8a  00000000  00000000  000440cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ed55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036a0  00000000  00000000  0010ed98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00112438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032c4 	.word	0x080032c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080032c4 	.word	0x080032c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <Stepper_Init>:
#define STEPS_PER_MM_E 95

static float current_pos[STEPPER_COUNT] = {0};
static StepperMotor motors[STEPPER_COUNT];

void Stepper_Init(StepperID id, StepperMotor config) {
 80004b8:	b084      	sub	sp, #16
 80004ba:	b5b0      	push	{r4, r5, r7, lr}
 80004bc:	b082      	sub	sp, #8
 80004be:	af00      	add	r7, sp, #0
 80004c0:	4604      	mov	r4, r0
 80004c2:	f107 001c 	add.w	r0, r7, #28
 80004c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80004ca:	4623      	mov	r3, r4
 80004cc:	71fb      	strb	r3, [r7, #7]
    motors[id] = config;
 80004ce:	79fa      	ldrb	r2, [r7, #7]
 80004d0:	490e      	ldr	r1, [pc, #56]	@ (800050c <Stepper_Init+0x54>)
 80004d2:	4613      	mov	r3, r2
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	4413      	add	r3, r2
 80004d8:	00db      	lsls	r3, r3, #3
 80004da:	440b      	add	r3, r1
 80004dc:	461d      	mov	r5, r3
 80004de:	f107 041c 	add.w	r4, r7, #28
 80004e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80004ee:	e885 0003 	stmia.w	r5, {r0, r1}
    HAL_GPIO_WritePin(config.EN_Port, config.EN_Pin, GPIO_PIN_SET); // Disable initially
 80004f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004f4:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80004f6:	2201      	movs	r2, #1
 80004f8:	4618      	mov	r0, r3
 80004fa:	f001 f98d 	bl	8001818 <HAL_GPIO_WritePin>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000508:	b004      	add	sp, #16
 800050a:	4770      	bx	lr
 800050c:	20000038 	.word	0x20000038

08000510 <Stepper_Enable>:

void Stepper_Enable(StepperID id) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(motors[id].EN_Port, motors[id].EN_Pin, GPIO_PIN_RESET);
 800051a:	79fa      	ldrb	r2, [r7, #7]
 800051c:	490c      	ldr	r1, [pc, #48]	@ (8000550 <Stepper_Enable+0x40>)
 800051e:	4613      	mov	r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	4413      	add	r3, r2
 8000524:	00db      	lsls	r3, r3, #3
 8000526:	440b      	add	r3, r1
 8000528:	3310      	adds	r3, #16
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	4908      	ldr	r1, [pc, #32]	@ (8000550 <Stepper_Enable+0x40>)
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	440b      	add	r3, r1
 800053a:	3314      	adds	r3, #20
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	2200      	movs	r2, #0
 8000540:	4619      	mov	r1, r3
 8000542:	f001 f969 	bl	8001818 <HAL_GPIO_WritePin>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000038 	.word	0x20000038

08000554 <Stepper_SetDirection>:

void Stepper_Disable(StepperID id) {
    HAL_GPIO_WritePin(motors[id].EN_Port, motors[id].EN_Pin, GPIO_PIN_SET);
}

void Stepper_SetDirection(StepperID id, uint8_t dir) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	460a      	mov	r2, r1
 800055e:	71fb      	strb	r3, [r7, #7]
 8000560:	4613      	mov	r3, r2
 8000562:	71bb      	strb	r3, [r7, #6]
    motors[id].direction = dir;
 8000564:	79fa      	ldrb	r2, [r7, #7]
 8000566:	4914      	ldr	r1, [pc, #80]	@ (80005b8 <Stepper_SetDirection+0x64>)
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	440b      	add	r3, r1
 8000572:	331c      	adds	r3, #28
 8000574:	79ba      	ldrb	r2, [r7, #6]
 8000576:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(motors[id].DIR_Port, motors[id].DIR_Pin, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000578:	79fa      	ldrb	r2, [r7, #7]
 800057a:	490f      	ldr	r1, [pc, #60]	@ (80005b8 <Stepper_SetDirection+0x64>)
 800057c:	4613      	mov	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	4413      	add	r3, r2
 8000582:	00db      	lsls	r3, r3, #3
 8000584:	440b      	add	r3, r1
 8000586:	3308      	adds	r3, #8
 8000588:	6818      	ldr	r0, [r3, #0]
 800058a:	79fa      	ldrb	r2, [r7, #7]
 800058c:	490a      	ldr	r1, [pc, #40]	@ (80005b8 <Stepper_SetDirection+0x64>)
 800058e:	4613      	mov	r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4413      	add	r3, r2
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	440b      	add	r3, r1
 8000598:	330c      	adds	r3, #12
 800059a:	8819      	ldrh	r1, [r3, #0]
 800059c:	79bb      	ldrb	r3, [r7, #6]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	bf14      	ite	ne
 80005a2:	2301      	movne	r3, #1
 80005a4:	2300      	moveq	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	f001 f935 	bl	8001818 <HAL_GPIO_WritePin>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000038 	.word	0x20000038

080005bc <Stepper_Move>:

void Stepper_Move(StepperID id, uint32_t steps, uint32_t freq_hz) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
 80005c8:	73fb      	strb	r3, [r7, #15]
    StepperMotor* m = &motors[id];
 80005ca:	7bfa      	ldrb	r2, [r7, #15]
 80005cc:	4613      	mov	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	4a16      	ldr	r2, [pc, #88]	@ (8000630 <Stepper_Move+0x74>)
 80005d6:	4413      	add	r3, r2
 80005d8:	61fb      	str	r3, [r7, #28]
    m->steps_remaining = steps;
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	68ba      	ldr	r2, [r7, #8]
 80005de:	621a      	str	r2, [r3, #32]
    m->active = 1;
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	2201      	movs	r2, #1
 80005e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    uint32_t timer_clk = HAL_RCC_GetPCLK1Freq() * 2;
 80005e8:	f001 fe88 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 80005ec:	4603      	mov	r3, r0
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	61bb      	str	r3, [r7, #24]
    uint32_t arr = (timer_clk / (freq_hz * 2)) - 1;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	69ba      	ldr	r2, [r7, #24]
 80005f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fc:	3b01      	subs	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]

    m->htim->Instance->PSC = 0;
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	@ 0x28
    m->htim->Instance->ARR = arr;
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	62da      	str	r2, [r3, #44]	@ 0x2c
    m->htim->Instance->CNT = 0;
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_TIM_Base_Start_IT(m->htim);
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fece 	bl	80023c4 <HAL_TIM_Base_Start_IT>
}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000038 	.word	0x20000038

08000634 <Stepper_Stop>:

void Stepper_Stop(StepperID id) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
    motors[id].active = 0;
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	4916      	ldr	r1, [pc, #88]	@ (800069c <Stepper_Stop+0x68>)
 8000642:	4613      	mov	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	440b      	add	r3, r1
 800064c:	3324      	adds	r3, #36	@ 0x24
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(motors[id].htim);
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	4911      	ldr	r1, [pc, #68]	@ (800069c <Stepper_Stop+0x68>)
 8000656:	4613      	mov	r3, r2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	4413      	add	r3, r2
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	440b      	add	r3, r1
 8000660:	3318      	adds	r3, #24
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f001 ff1d 	bl	80024a4 <HAL_TIM_Base_Stop_IT>
    HAL_GPIO_WritePin(motors[id].STEP_Port, motors[id].STEP_Pin, GPIO_PIN_RESET);
 800066a:	79fa      	ldrb	r2, [r7, #7]
 800066c:	490b      	ldr	r1, [pc, #44]	@ (800069c <Stepper_Stop+0x68>)
 800066e:	4613      	mov	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4413      	add	r3, r2
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	440b      	add	r3, r1
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	79fa      	ldrb	r2, [r7, #7]
 800067c:	4907      	ldr	r1, [pc, #28]	@ (800069c <Stepper_Stop+0x68>)
 800067e:	4613      	mov	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	440b      	add	r3, r1
 8000688:	3304      	adds	r3, #4
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	f001 f8c2 	bl	8001818 <HAL_GPIO_WritePin>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000038 	.word	0x20000038

080006a0 <Stepper_TIM_ISR>:

void Stepper_TIM_ISR(TIM_HandleTypeDef *htim) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < STEPPER_COUNT; i++) {
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e052      	b.n	8000754 <Stepper_TIM_ISR+0xb4>
        if (motors[i].htim == htim && motors[i].active) {
 80006ae:	492d      	ldr	r1, [pc, #180]	@ (8000764 <Stepper_TIM_ISR+0xc4>)
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	4613      	mov	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	440b      	add	r3, r1
 80006bc:	3318      	adds	r3, #24
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d143      	bne.n	800074e <Stepper_TIM_ISR+0xae>
 80006c6:	4927      	ldr	r1, [pc, #156]	@ (8000764 <Stepper_TIM_ISR+0xc4>)
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	4613      	mov	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4413      	add	r3, r2
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	440b      	add	r3, r1
 80006d4:	3324      	adds	r3, #36	@ 0x24
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d038      	beq.n	800074e <Stepper_TIM_ISR+0xae>
            if (motors[i].steps_remaining > 0) {
 80006dc:	4921      	ldr	r1, [pc, #132]	@ (8000764 <Stepper_TIM_ISR+0xc4>)
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	4613      	mov	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	440b      	add	r3, r1
 80006ea:	3320      	adds	r3, #32
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d027      	beq.n	8000742 <Stepper_TIM_ISR+0xa2>
                HAL_GPIO_TogglePin(motors[i].STEP_Port, motors[i].STEP_Pin);
 80006f2:	491c      	ldr	r1, [pc, #112]	@ (8000764 <Stepper_TIM_ISR+0xc4>)
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	4613      	mov	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	440b      	add	r3, r1
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	4918      	ldr	r1, [pc, #96]	@ (8000764 <Stepper_TIM_ISR+0xc4>)
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	4613      	mov	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	440b      	add	r3, r1
 8000710:	3304      	adds	r3, #4
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	f001 f898 	bl	800184a <HAL_GPIO_TogglePin>
                motors[i].steps_remaining--;
 800071a:	4912      	ldr	r1, [pc, #72]	@ (8000764 <Stepper_TIM_ISR+0xc4>)
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	4613      	mov	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4413      	add	r3, r2
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	440b      	add	r3, r1
 8000728:	3320      	adds	r3, #32
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	1e59      	subs	r1, r3, #1
 800072e:	480d      	ldr	r0, [pc, #52]	@ (8000764 <Stepper_TIM_ISR+0xc4>)
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4403      	add	r3, r0
 800073c:	3320      	adds	r3, #32
 800073e:	6019      	str	r1, [r3, #0]
            } else {
                Stepper_Stop((StepperID)i);
            }
            break;
 8000740:	e00c      	b.n	800075c <Stepper_TIM_ISR+0xbc>
                Stepper_Stop((StepperID)i);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff74 	bl	8000634 <Stepper_Stop>
            break;
 800074c:	e006      	b.n	800075c <Stepper_TIM_ISR+0xbc>
    for (int i = 0; i < STEPPER_COUNT; i++) {
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3301      	adds	r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2b03      	cmp	r3, #3
 8000758:	dda9      	ble.n	80006ae <Stepper_TIM_ISR+0xe>
        }
    }
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000038 	.word	0x20000038

08000768 <moveTo>:

void moveTo(float x, float y, float z, float e, uint32_t speed_mm_s) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b09c      	sub	sp, #112	@ 0x70
 800076c:	af00      	add	r7, sp, #0
 800076e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000772:	edc7 0a04 	vstr	s1, [r7, #16]
 8000776:	ed87 1a03 	vstr	s2, [r7, #12]
 800077a:	edc7 1a02 	vstr	s3, [r7, #8]
 800077e:	6078      	str	r0, [r7, #4]
    float target[STEPPER_COUNT] = {x, y, z, e};
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	663b      	str	r3, [r7, #96]	@ 0x60
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	667b      	str	r3, [r7, #100]	@ 0x64
    float delta[STEPPER_COUNT];
    uint32_t steps[STEPPER_COUNT];
    int dir[STEPPER_COUNT];
    uint32_t freq[STEPPER_COUNT];

    for (int i = 0; i < STEPPER_COUNT; i++) {
 8000790:	2300      	movs	r3, #0
 8000792:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000794:	e02e      	b.n	80007f4 <moveTo+0x8c>
        delta[i] = target[i] - current_pos[i];
 8000796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	3370      	adds	r3, #112	@ 0x70
 800079c:	443b      	add	r3, r7
 800079e:	3b18      	subs	r3, #24
 80007a0:	ed93 7a00 	vldr	s14, [r3]
 80007a4:	4a57      	ldr	r2, [pc, #348]	@ (8000904 <moveTo+0x19c>)
 80007a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	edd3 7a00 	vldr	s15, [r3]
 80007b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	3370      	adds	r3, #112	@ 0x70
 80007ba:	443b      	add	r3, r7
 80007bc:	3b28      	subs	r3, #40	@ 0x28
 80007be:	edc3 7a00 	vstr	s15, [r3]
        dir[i] = (delta[i] >= 0) ? 1 : 0;
 80007c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	3370      	adds	r3, #112	@ 0x70
 80007c8:	443b      	add	r3, r7
 80007ca:	3b28      	subs	r3, #40	@ 0x28
 80007cc:	edd3 7a00 	vldr	s15, [r3]
 80007d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d8:	bfac      	ite	ge
 80007da:	2301      	movge	r3, #1
 80007dc:	2300      	movlt	r3, #0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	461a      	mov	r2, r3
 80007e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	3370      	adds	r3, #112	@ 0x70
 80007e8:	443b      	add	r3, r7
 80007ea:	f843 2c48 	str.w	r2, [r3, #-72]
    for (int i = 0; i < STEPPER_COUNT; i++) {
 80007ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007f0:	3301      	adds	r3, #1
 80007f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80007f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	ddcd      	ble.n	8000796 <moveTo+0x2e>
    }

    steps[STEPPER_X] = fabsf(delta[STEPPER_X]) * STEPS_PER_MM_X;
 80007fa:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80007fe:	eef0 7ae7 	vabs.f32	s15, s15
 8000802:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8000908 <moveTo+0x1a0>
 8000806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800080a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800080e:	ee17 3a90 	vmov	r3, s15
 8000812:	63bb      	str	r3, [r7, #56]	@ 0x38
    steps[STEPPER_Y] = fabsf(delta[STEPPER_Y]) * STEPS_PER_MM_Y;
 8000814:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000818:	eef0 7ae7 	vabs.f32	s15, s15
 800081c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000908 <moveTo+0x1a0>
 8000820:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000828:	ee17 3a90 	vmov	r3, s15
 800082c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    steps[STEPPER_Z] = fabsf(delta[STEPPER_Z]) * STEPS_PER_MM_Z;
 800082e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000832:	eef0 7ae7 	vabs.f32	s15, s15
 8000836:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800090c <moveTo+0x1a4>
 800083a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800083e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000842:	ee17 3a90 	vmov	r3, s15
 8000846:	643b      	str	r3, [r7, #64]	@ 0x40
    steps[STEPPER_E] = fabsf(delta[STEPPER_E]) * STEPS_PER_MM_E;
 8000848:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800084c:	eef0 7ae7 	vabs.f32	s15, s15
 8000850:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000910 <moveTo+0x1a8>
 8000854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800085c:	ee17 3a90 	vmov	r3, s15
 8000860:	647b      	str	r3, [r7, #68]	@ 0x44

    freq[STEPPER_X] = speed_mm_s * STEPS_PER_MM_X;
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
    freq[STEPPER_Y] = speed_mm_s * STEPS_PER_MM_Y;
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	4613      	mov	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	61fb      	str	r3, [r7, #28]
    freq[STEPPER_Z] = speed_mm_s * STEPS_PER_MM_Z;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000880:	fb02 f303 	mul.w	r3, r2, r3
 8000884:	623b      	str	r3, [r7, #32]
    freq[STEPPER_E] = speed_mm_s * STEPS_PER_MM_E;
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	4613      	mov	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4413      	add	r3, r2
 800088e:	015b      	lsls	r3, r3, #5
 8000890:	1a9b      	subs	r3, r3, r2
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < STEPPER_COUNT; i++) {
 8000894:	2300      	movs	r3, #0
 8000896:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000898:	e02b      	b.n	80008f2 <moveTo+0x18a>
        Stepper_SetDirection((StepperID)i, dir[i]);
 800089a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800089c:	b2da      	uxtb	r2, r3
 800089e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	3370      	adds	r3, #112	@ 0x70
 80008a4:	443b      	add	r3, r7
 80008a6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4619      	mov	r1, r3
 80008ae:	4610      	mov	r0, r2
 80008b0:	f7ff fe50 	bl	8000554 <Stepper_SetDirection>
        Stepper_Move((StepperID)i, steps[i], freq[i]);
 80008b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008b6:	b2d8      	uxtb	r0, r3
 80008b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	3370      	adds	r3, #112	@ 0x70
 80008be:	443b      	add	r3, r7
 80008c0:	f853 1c38 	ldr.w	r1, [r3, #-56]
 80008c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	3370      	adds	r3, #112	@ 0x70
 80008ca:	443b      	add	r3, r7
 80008cc:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80008d0:	461a      	mov	r2, r3
 80008d2:	f7ff fe73 	bl	80005bc <Stepper_Move>
        current_pos[i] = target[i];
 80008d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	3370      	adds	r3, #112	@ 0x70
 80008dc:	443b      	add	r3, r7
 80008de:	3b18      	subs	r3, #24
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4908      	ldr	r1, [pc, #32]	@ (8000904 <moveTo+0x19c>)
 80008e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < STEPPER_COUNT; i++) {
 80008ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008ee:	3301      	adds	r3, #1
 80008f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80008f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	ddd0      	ble.n	800089a <moveTo+0x132>
    }
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3770      	adds	r7, #112	@ 0x70
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000028 	.word	0x20000028
 8000908:	42a00000 	.word	0x42a00000
 800090c:	43c80000 	.word	0x43c80000
 8000910:	42be0000 	.word	0x42be0000

08000914 <setPosition>:

void setPosition(float x, float y, float z, float e) {
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	ed87 0a03 	vstr	s0, [r7, #12]
 800091e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000922:	ed87 1a01 	vstr	s2, [r7, #4]
 8000926:	edc7 1a00 	vstr	s3, [r7]
    current_pos[STEPPER_X] = x;
 800092a:	4a09      	ldr	r2, [pc, #36]	@ (8000950 <setPosition+0x3c>)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6013      	str	r3, [r2, #0]
    current_pos[STEPPER_Y] = y;
 8000930:	4a07      	ldr	r2, [pc, #28]	@ (8000950 <setPosition+0x3c>)
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	6053      	str	r3, [r2, #4]
    current_pos[STEPPER_Z] = z;
 8000936:	4a06      	ldr	r2, [pc, #24]	@ (8000950 <setPosition+0x3c>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6093      	str	r3, [r2, #8]
    current_pos[STEPPER_E] = e;
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <setPosition+0x3c>)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	60d3      	str	r3, [r2, #12]
}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000028 	.word	0x20000028

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b5b0      	push	{r4, r5, r7, lr}
 8000956:	b0b0      	sub	sp, #192	@ 0xc0
 8000958:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fc19 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f917 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 f9ff 	bl	8000d64 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000966:	f000 f9cf 	bl	8000d08 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800096a:	f000 f97d 	bl	8000c68 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // Define motor configurations
  StepperMotor motor_x = {
 800096e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000972:	2228      	movs	r2, #40	@ 0x28
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fc78 	bl	800326c <memset>
 800097c:	4b7d      	ldr	r3, [pc, #500]	@ (8000b74 <main+0x220>)
 800097e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000984:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8000988:	4b7a      	ldr	r3, [pc, #488]	@ (8000b74 <main+0x220>)
 800098a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800098e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000992:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8000996:	4b77      	ldr	r3, [pc, #476]	@ (8000b74 <main+0x220>)
 8000998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800099c:	2380      	movs	r3, #128	@ 0x80
 800099e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80009a2:	4b75      	ldr	r3, [pc, #468]	@ (8000b78 <main+0x224>)
 80009a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      .STEP_Port = GPIOE, .STEP_Pin = GPIO_PIN_9,
      .DIR_Port = GPIOE,  .DIR_Pin = GPIO_PIN_8,
      .EN_Port = GPIOE,   .EN_Pin = GPIO_PIN_7,
      .htim = &htim1
  };
  StepperMotor motor_y = {
 80009a8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80009ac:	2228      	movs	r2, #40	@ 0x28
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 fc5b 	bl	800326c <memset>
 80009b6:	4b6f      	ldr	r3, [pc, #444]	@ (8000b74 <main+0x220>)
 80009b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80009ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009be:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 80009c2:	4b6c      	ldr	r3, [pc, #432]	@ (8000b74 <main+0x220>)
 80009c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80009c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ca:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80009ce:	4b69      	ldr	r3, [pc, #420]	@ (8000b74 <main+0x220>)
 80009d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80009d2:	2380      	movs	r3, #128	@ 0x80
 80009d4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80009d8:	4b67      	ldr	r3, [pc, #412]	@ (8000b78 <main+0x224>)
 80009da:	66bb      	str	r3, [r7, #104]	@ 0x68
      .STEP_Port = GPIOE, .STEP_Pin = GPIO_PIN_11,
      .DIR_Port = GPIOE,  .DIR_Pin = GPIO_PIN_10,
      .EN_Port = GPIOE,   .EN_Pin = GPIO_PIN_7,
      .htim = &htim1
  };
  StepperMotor motor_z = {
 80009dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e0:	2228      	movs	r2, #40	@ 0x28
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fc41 	bl	800326c <memset>
 80009ea:	4b62      	ldr	r3, [pc, #392]	@ (8000b74 <main+0x220>)
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80009f4:	4b5f      	ldr	r3, [pc, #380]	@ (8000b74 <main+0x220>)
 80009f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80009f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80009fe:	4b5d      	ldr	r3, [pc, #372]	@ (8000b74 <main+0x220>)
 8000a00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a02:	2380      	movs	r3, #128	@ 0x80
 8000a04:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8000a06:	4b5c      	ldr	r3, [pc, #368]	@ (8000b78 <main+0x224>)
 8000a08:	643b      	str	r3, [r7, #64]	@ 0x40
      .STEP_Port = GPIOE, .STEP_Pin = GPIO_PIN_13,
      .DIR_Port = GPIOE,  .DIR_Pin = GPIO_PIN_12,
      .EN_Port = GPIOE,   .EN_Pin = GPIO_PIN_7,
      .htim = &htim1
  };
  StepperMotor motor_e = {
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2228      	movs	r2, #40	@ 0x28
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fc2b 	bl	800326c <memset>
 8000a16:	4b57      	ldr	r3, [pc, #348]	@ (8000b74 <main+0x220>)
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a1e:	80bb      	strh	r3, [r7, #4]
 8000a20:	4b54      	ldr	r3, [pc, #336]	@ (8000b74 <main+0x220>)
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a28:	81bb      	strh	r3, [r7, #12]
 8000a2a:	4b52      	ldr	r3, [pc, #328]	@ (8000b74 <main+0x220>)
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	82bb      	strh	r3, [r7, #20]
 8000a32:	4b51      	ldr	r3, [pc, #324]	@ (8000b78 <main+0x224>)
 8000a34:	61bb      	str	r3, [r7, #24]
      .EN_Port = GPIOE,   .EN_Pin = GPIO_PIN_7,
      .htim = &htim1
  };

  // Initialize steppers
  Stepper_Init(STEPPER_X, motor_x);
 8000a36:	466d      	mov	r5, sp
 8000a38:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 8000a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a40:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a44:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000a48:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000a4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff fd32 	bl	80004b8 <Stepper_Init>
  Stepper_Init(STEPPER_Y, motor_y);
 8000a54:	466d      	mov	r5, sp
 8000a56:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8000a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a5e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a62:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000a66:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff fd23 	bl	80004b8 <Stepper_Init>
  Stepper_Init(STEPPER_Z, motor_z);
 8000a72:	466d      	mov	r5, sp
 8000a74:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a7c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000a84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f7ff fd14 	bl	80004b8 <Stepper_Init>
  Stepper_Init(STEPPER_E, motor_e);
 8000a90:	466d      	mov	r5, sp
 8000a92:	f107 040c 	add.w	r4, r7, #12
 8000a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a9a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a9e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	f7ff fd06 	bl	80004b8 <Stepper_Init>

  // Enable all steppers
  Stepper_Enable(STEPPER_X);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff fd2f 	bl	8000510 <Stepper_Enable>
  Stepper_Enable(STEPPER_Y);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fd2c 	bl	8000510 <Stepper_Enable>
  Stepper_Enable(STEPPER_Z);
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f7ff fd29 	bl	8000510 <Stepper_Enable>
  Stepper_Enable(STEPPER_E);
 8000abe:	2003      	movs	r0, #3
 8000ac0:	f7ff fd26 	bl	8000510 <Stepper_Enable>

  // Set initial position
  setPosition(0, 0, 0, 0);
 8000ac4:	eddf 1a2d 	vldr	s3, [pc, #180]	@ 8000b7c <main+0x228>
 8000ac8:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 8000b7c <main+0x228>
 8000acc:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8000b7c <main+0x228>
 8000ad0:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8000b7c <main+0x228>
 8000ad4:	f7ff ff1e 	bl	8000914 <setPosition>

  // Move Y axis by 100 mm at 10 mm/s
  moveTo(1000.0, 0.0, 0.0, 0.0, 100);
 8000ad8:	2064      	movs	r0, #100	@ 0x64
 8000ada:	eddf 1a28 	vldr	s3, [pc, #160]	@ 8000b7c <main+0x228>
 8000ade:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 8000b7c <main+0x228>
 8000ae2:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8000b7c <main+0x228>
 8000ae6:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8000b80 <main+0x22c>
 8000aea:	f7ff fe3d 	bl	8000768 <moveTo>
  HAL_Delay(1000);
 8000aee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000af2:	f000 fbbf 	bl	8001274 <HAL_Delay>
  moveTo(-1000.0, 0.0, 0.0, 0.0, 500);
 8000af6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000afa:	eddf 1a20 	vldr	s3, [pc, #128]	@ 8000b7c <main+0x228>
 8000afe:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 8000b7c <main+0x228>
 8000b02:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8000b7c <main+0x228>
 8000b06:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8000b84 <main+0x230>
 8000b0a:	f7ff fe2d 	bl	8000768 <moveTo>
  HAL_Delay(1000);
 8000b0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b12:	f000 fbaf 	bl	8001274 <HAL_Delay>
  moveTo(1000.0, 0.0, 0.0, 0.0, 1000);
 8000b16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b1a:	eddf 1a18 	vldr	s3, [pc, #96]	@ 8000b7c <main+0x228>
 8000b1e:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 8000b7c <main+0x228>
 8000b22:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8000b7c <main+0x228>
 8000b26:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8000b80 <main+0x22c>
 8000b2a:	f7ff fe1d 	bl	8000768 <moveTo>
  HAL_Delay(1000);
 8000b2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b32:	f000 fb9f 	bl	8001274 <HAL_Delay>
  moveTo(1300.0, 0.0, 0.0, 0.0, 400);
 8000b36:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000b3a:	eddf 1a10 	vldr	s3, [pc, #64]	@ 8000b7c <main+0x228>
 8000b3e:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 8000b7c <main+0x228>
 8000b42:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8000b7c <main+0x228>
 8000b46:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8000b88 <main+0x234>
 8000b4a:	f7ff fe0d 	bl	8000768 <moveTo>
  HAL_Delay(1000);
 8000b4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b52:	f000 fb8f 	bl	8001274 <HAL_Delay>
  moveTo(1600.0, 0.0, 0.0, 0.0, 2000);
 8000b56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b5a:	eddf 1a08 	vldr	s3, [pc, #32]	@ 8000b7c <main+0x228>
 8000b5e:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8000b7c <main+0x228>
 8000b62:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000b7c <main+0x228>
 8000b66:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000b8c <main+0x238>
 8000b6a:	f7ff fdfd 	bl	8000768 <moveTo>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b6e:	bf00      	nop
 8000b70:	e7fd      	b.n	8000b6e <main+0x21a>
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	200000d8 	.word	0x200000d8
 8000b7c:	00000000 	.word	0x00000000
 8000b80:	447a0000 	.word	0x447a0000
 8000b84:	c47a0000 	.word	0xc47a0000
 8000b88:	44a28000 	.word	0x44a28000
 8000b8c:	44c80000 	.word	0x44c80000

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	@ 0x50
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0320 	add.w	r3, r7, #32
 8000b9a:	2230      	movs	r2, #48	@ 0x30
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 fb64 	bl	800326c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <SystemClock_Config+0xd0>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	4a28      	ldr	r2, [pc, #160]	@ (8000c60 <SystemClock_Config+0xd0>)
 8000bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc4:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <SystemClock_Config+0xd0>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <SystemClock_Config+0xd4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a22      	ldr	r2, [pc, #136]	@ (8000c64 <SystemClock_Config+0xd4>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <SystemClock_Config+0xd4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000c08:	230f      	movs	r3, #15
 8000c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c0c:	2390      	movs	r3, #144	@ 0x90
 8000c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c14:	2305      	movs	r3, #5
 8000c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 0320 	add.w	r3, r7, #32
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 ff3d 	bl	8001a9c <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c28:	f000 f98e 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 f9a0 	bl	8001f8c <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c52:	f000 f979 	bl	8000f48 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3750      	adds	r7, #80	@ 0x50
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000

08000c68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	@ (8000d00 <MX_TIM1_Init+0x98>)
 8000c86:	4a1f      	ldr	r2, [pc, #124]	@ (8000d04 <MX_TIM1_Init+0x9c>)
 8000c88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <MX_TIM1_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <MX_TIM1_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <MX_TIM1_Init+0x98>)
 8000c98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <MX_TIM1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <MX_TIM1_Init+0x98>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <MX_TIM1_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cb0:	4813      	ldr	r0, [pc, #76]	@ (8000d00 <MX_TIM1_Init+0x98>)
 8000cb2:	f001 fb37 	bl	8002324 <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cbc:	f000 f944 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <MX_TIM1_Init+0x98>)
 8000cce:	f001 fd08 	bl	80026e2 <HAL_TIM_ConfigClockSource>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000cd8:	f000 f936 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <MX_TIM1_Init+0x98>)
 8000cea:	f001 ff29 	bl	8002b40 <HAL_TIMEx_MasterConfigSynchronization>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cf4:	f000 f928 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000d8 	.word	0x200000d8
 8000d04:	40010000 	.word	0x40010000

08000d08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d16:	2204      	movs	r2, #4
 8000d18:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4c:	f000 fd97 	bl	800187e <HAL_PCD_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d56:	f000 f8f7 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000120 	.word	0x20000120

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	@ 0x30
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	4b6c      	ldr	r3, [pc, #432]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a6b      	ldr	r2, [pc, #428]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b69      	ldr	r3, [pc, #420]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	4b65      	ldr	r3, [pc, #404]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a64      	ldr	r2, [pc, #400]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b62      	ldr	r3, [pc, #392]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b5e      	ldr	r3, [pc, #376]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a5d      	ldr	r2, [pc, #372]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b57      	ldr	r3, [pc, #348]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a56      	ldr	r2, [pc, #344]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b54      	ldr	r3, [pc, #336]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b50      	ldr	r3, [pc, #320]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a4f      	ldr	r2, [pc, #316]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000df4:	f043 0310 	orr.w	r3, r3, #16
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b4d      	ldr	r3, [pc, #308]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b49      	ldr	r3, [pc, #292]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a48      	ldr	r2, [pc, #288]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b46      	ldr	r3, [pc, #280]	@ (8000f30 <MX_GPIO_Init+0x1cc>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2108      	movs	r1, #8
 8000e26:	4843      	ldr	r0, [pc, #268]	@ (8000f34 <MX_GPIO_Init+0x1d0>)
 8000e28:	f000 fcf6 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000e32:	4841      	ldr	r0, [pc, #260]	@ (8000f38 <MX_GPIO_Init+0x1d4>)
 8000e34:	f000 fcf0 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2106      	movs	r1, #6
 8000e3c:	483f      	ldr	r0, [pc, #252]	@ (8000f3c <MX_GPIO_Init+0x1d8>)
 8000e3e:	f000 fceb 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e42:	2200      	movs	r2, #0
 8000e44:	f64f 7180 	movw	r1, #65408	@ 0xff80
 8000e48:	483d      	ldr	r0, [pc, #244]	@ (8000f40 <MX_GPIO_Init+0x1dc>)
 8000e4a:	f000 fce5 	bl	8001818 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e54:	483b      	ldr	r0, [pc, #236]	@ (8000f44 <MX_GPIO_Init+0x1e0>)
 8000e56:	f000 fcdf 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	21c0      	movs	r1, #192	@ 0xc0
 8000e5e:	4836      	ldr	r0, [pc, #216]	@ (8000f38 <MX_GPIO_Init+0x1d4>)
 8000e60:	f000 fcda 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e64:	230f      	movs	r3, #15
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4830      	ldr	r0, [pc, #192]	@ (8000f38 <MX_GPIO_Init+0x1d4>)
 8000e78:	f000 fb32 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4828      	ldr	r0, [pc, #160]	@ (8000f34 <MX_GPIO_Init+0x1d0>)
 8000e94:	f000 fb24 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e98:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4821      	ldr	r0, [pc, #132]	@ (8000f38 <MX_GPIO_Init+0x1d4>)
 8000eb2:	f000 fb15 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	481b      	ldr	r0, [pc, #108]	@ (8000f3c <MX_GPIO_Init+0x1d8>)
 8000ece:	f000 fb07 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000ed2:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000ed6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4815      	ldr	r0, [pc, #84]	@ (8000f40 <MX_GPIO_Init+0x1dc>)
 8000eec:	f000 faf8 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ef0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	480e      	ldr	r0, [pc, #56]	@ (8000f44 <MX_GPIO_Init+0x1e0>)
 8000f0a:	f000 fae9 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	4808      	ldr	r0, [pc, #32]	@ (8000f44 <MX_GPIO_Init+0x1e0>)
 8000f24:	f000 fadc 	bl	80014e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f28:	bf00      	nop
 8000f2a:	3730      	adds	r7, #48	@ 0x30
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020800 	.word	0x40020800
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40020c00 	.word	0x40020c00

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <Error_Handler+0x8>

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	4a08      	ldr	r2, [pc, #32]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8000fec <HAL_TIM_Base_MspInit+0x48>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d115      	bne.n	8000fe2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x4c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x4c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2019      	movs	r0, #25
 8000fd8:	f000 fa4b 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fdc:	2019      	movs	r0, #25
 8000fde:	f000 fa64 	bl	80014aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001014:	d132      	bne.n	800107c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <HAL_PCD_MspInit+0x90>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a19      	ldr	r2, [pc, #100]	@ (8001084 <HAL_PCD_MspInit+0x90>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <HAL_PCD_MspInit+0x90>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001032:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001044:	230a      	movs	r3, #10
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	480e      	ldr	r0, [pc, #56]	@ (8001088 <HAL_PCD_MspInit+0x94>)
 8001050:	f000 fa46 	bl	80014e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <HAL_PCD_MspInit+0x90>)
 8001056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001058:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <HAL_PCD_MspInit+0x90>)
 800105a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800105e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <HAL_PCD_MspInit+0x90>)
 8001066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001068:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <HAL_PCD_MspInit+0x90>)
 800106a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <HAL_PCD_MspInit+0x90>)
 8001072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	@ 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <NMI_Handler+0x4>

08001094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e2:	f000 f8a7 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010f2:	f001 fa06 	bl	8002502 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200000d8 	.word	0x200000d8

08001100 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    Stepper_TIM_ISR(htim);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff fac9 	bl	80006a0 <Stepper_TIM_ISR>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001174 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001140:	f7ff ffea 	bl	8001118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001146:	490d      	ldr	r1, [pc, #52]	@ (800117c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800115c:	4c0a      	ldr	r4, [pc, #40]	@ (8001188 <LoopFillZerobss+0x22>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116a:	f002 f887 	bl	800327c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fbf1 	bl	8000954 <main>
  bx  lr    
 8001172:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001180:	08003304 	.word	0x08003304
  ldr r2, =_sbss
 8001184:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001188:	20000608 	.word	0x20000608

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001194:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <HAL_Init+0x40>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800119e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <HAL_Init+0x40>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	@ (80011d0 <HAL_Init+0x40>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f94f 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	200f      	movs	r0, #15
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff fec6 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f967 	bl	80014c6 <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f92f 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	@ (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000000 	.word	0x20000000
 800122c:	20000008 	.word	0x20000008
 8001230:	20000004 	.word	0x20000004

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008
 8001258:	20000604 	.word	0x20000604

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000604 	.word	0x20000604

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffee 	bl	800125c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffde 	bl	800125c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	@ (8001358 <__NVIC_EnableIRQ+0x38>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	@ (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	@ 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff29 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff3e 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff8e 	bl	80013b0 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5d 	bl	800135c <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff31 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffa2 	bl	8001418 <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	@ 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	e16b      	b.n	80017d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 815a 	bne.w	80017ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d005      	beq.n	8001532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152e:	2b02      	cmp	r3, #2
 8001530:	d130      	bne.n	8001594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 0201 	and.w	r2, r3, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b03      	cmp	r3, #3
 800159e:	d017      	beq.n	80015d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d123      	bne.n	8001624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	08da      	lsrs	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3208      	adds	r2, #8
 800161e:	69b9      	ldr	r1, [r7, #24]
 8001620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0203 	and.w	r2, r3, #3
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80b4 	beq.w	80017ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b60      	ldr	r3, [pc, #384]	@ (80017ec <HAL_GPIO_Init+0x30c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	4a5f      	ldr	r2, [pc, #380]	@ (80017ec <HAL_GPIO_Init+0x30c>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001674:	6453      	str	r3, [r2, #68]	@ 0x44
 8001676:	4b5d      	ldr	r3, [pc, #372]	@ (80017ec <HAL_GPIO_Init+0x30c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001682:	4a5b      	ldr	r2, [pc, #364]	@ (80017f0 <HAL_GPIO_Init+0x310>)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a52      	ldr	r2, [pc, #328]	@ (80017f4 <HAL_GPIO_Init+0x314>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d02b      	beq.n	8001706 <HAL_GPIO_Init+0x226>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a51      	ldr	r2, [pc, #324]	@ (80017f8 <HAL_GPIO_Init+0x318>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d025      	beq.n	8001702 <HAL_GPIO_Init+0x222>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a50      	ldr	r2, [pc, #320]	@ (80017fc <HAL_GPIO_Init+0x31c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01f      	beq.n	80016fe <HAL_GPIO_Init+0x21e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001800 <HAL_GPIO_Init+0x320>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x21a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001804 <HAL_GPIO_Init+0x324>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x216>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001808 <HAL_GPIO_Init+0x328>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x212>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4c      	ldr	r2, [pc, #304]	@ (800180c <HAL_GPIO_Init+0x32c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x20e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001810 <HAL_GPIO_Init+0x330>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x20a>
 80016e6:	2307      	movs	r3, #7
 80016e8:	e00e      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016ea:	2308      	movs	r3, #8
 80016ec:	e00c      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016ee:	2306      	movs	r3, #6
 80016f0:	e00a      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016f2:	2305      	movs	r3, #5
 80016f4:	e008      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016f6:	2304      	movs	r3, #4
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016fa:	2303      	movs	r3, #3
 80016fc:	e004      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016fe:	2302      	movs	r3, #2
 8001700:	e002      	b.n	8001708 <HAL_GPIO_Init+0x228>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_GPIO_Init+0x228>
 8001706:	2300      	movs	r3, #0
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	f002 0203 	and.w	r2, r2, #3
 800170e:	0092      	lsls	r2, r2, #2
 8001710:	4093      	lsls	r3, r2
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001718:	4935      	ldr	r1, [pc, #212]	@ (80017f0 <HAL_GPIO_Init+0x310>)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3302      	adds	r3, #2
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001726:	4b3b      	ldr	r3, [pc, #236]	@ (8001814 <HAL_GPIO_Init+0x334>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800174a:	4a32      	ldr	r2, [pc, #200]	@ (8001814 <HAL_GPIO_Init+0x334>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001750:	4b30      	ldr	r3, [pc, #192]	@ (8001814 <HAL_GPIO_Init+0x334>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001774:	4a27      	ldr	r2, [pc, #156]	@ (8001814 <HAL_GPIO_Init+0x334>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800177a:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <HAL_GPIO_Init+0x334>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800179e:	4a1d      	ldr	r2, [pc, #116]	@ (8001814 <HAL_GPIO_Init+0x334>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <HAL_GPIO_Init+0x334>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017c8:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <HAL_GPIO_Init+0x334>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3301      	adds	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	f67f ae90 	bls.w	80014fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3724      	adds	r7, #36	@ 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40013800 	.word	0x40013800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40021000 	.word	0x40021000
 8001808:	40021400 	.word	0x40021400
 800180c:	40021800 	.word	0x40021800
 8001810:	40021c00 	.word	0x40021c00
 8001814:	40013c00 	.word	0x40013c00

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800184a:	b480      	push	{r7}
 800184c:	b085      	sub	sp, #20
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800185c:	887a      	ldrh	r2, [r7, #2]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4013      	ands	r3, r2
 8001862:	041a      	lsls	r2, r3, #16
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	43d9      	mvns	r1, r3
 8001868:	887b      	ldrh	r3, [r7, #2]
 800186a:	400b      	ands	r3, r1
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	619a      	str	r2, [r3, #24]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af02      	add	r7, sp, #8
 8001884:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e101      	b.n	8001a94 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fba2 	bl	8000ff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2203      	movs	r2, #3
 80018b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018be:	d102      	bne.n	80018c6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 fa2c 	bl	8002d28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7c1a      	ldrb	r2, [r3, #16]
 80018d8:	f88d 2000 	strb.w	r2, [sp]
 80018dc:	3304      	adds	r3, #4
 80018de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e0:	f001 f9be 	bl	8002c60 <USB_CoreInit>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2202      	movs	r2, #2
 80018ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0ce      	b.n	8001a94 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 fa24 	bl	8002d4a <USB_SetCurrentMode>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0bf      	b.n	8001a94 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e04a      	b.n	80019b0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3315      	adds	r3, #21
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3314      	adds	r3, #20
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	b298      	uxth	r0, r3
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	332e      	adds	r3, #46	@ 0x2e
 8001956:	4602      	mov	r2, r0
 8001958:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	3318      	adds	r3, #24
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	331c      	adds	r3, #28
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	3320      	adds	r3, #32
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	3324      	adds	r3, #36	@ 0x24
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	3301      	adds	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d3af      	bcc.n	800191a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	e044      	b.n	8001a4a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019ec:	7bfa      	ldrb	r2, [r7, #15]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	3301      	adds	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	791b      	ldrb	r3, [r3, #4]
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d3b5      	bcc.n	80019c0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7c1a      	ldrb	r2, [r3, #16]
 8001a5c:	f88d 2000 	strb.w	r2, [sp]
 8001a60:	3304      	adds	r3, #4
 8001a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a64:	f001 f9be 	bl	8002de4 <USB_DevInit>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00c      	b.n	8001a94 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fb86 	bl	800319e <USB_DevDisconnect>

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e267      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d075      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001aba:	4b88      	ldr	r3, [pc, #544]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d00c      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac6:	4b85      	ldr	r3, [pc, #532]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d112      	bne.n	8001af8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad2:	4b82      	ldr	r3, [pc, #520]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ade:	d10b      	bne.n	8001af8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae0:	4b7e      	ldr	r3, [pc, #504]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d05b      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x108>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d157      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e242      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b00:	d106      	bne.n	8001b10 <HAL_RCC_OscConfig+0x74>
 8001b02:	4b76      	ldr	r3, [pc, #472]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a75      	ldr	r2, [pc, #468]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e01d      	b.n	8001b4c <HAL_RCC_OscConfig+0xb0>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x98>
 8001b1a:	4b70      	ldr	r3, [pc, #448]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b6d      	ldr	r3, [pc, #436]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6c      	ldr	r2, [pc, #432]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0xb0>
 8001b34:	4b69      	ldr	r3, [pc, #420]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a68      	ldr	r2, [pc, #416]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b66      	ldr	r3, [pc, #408]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a65      	ldr	r2, [pc, #404]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff fb82 	bl	800125c <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fb7e 	bl	800125c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	@ 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e207      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0xc0>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fb6e 	bl	800125c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff fb6a 	bl	800125c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	@ 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1f3      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	4b51      	ldr	r3, [pc, #324]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0xe8>
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d063      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bbe:	4b47      	ldr	r3, [pc, #284]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d11c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bca:	4b44      	ldr	r3, [pc, #272]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	4b41      	ldr	r3, [pc, #260]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_RCC_OscConfig+0x152>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e1c7      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bee:	4b3b      	ldr	r3, [pc, #236]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4937      	ldr	r1, [pc, #220]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	e03a      	b.n	8001c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d020      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <HAL_RCC_OscConfig+0x244>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff fb23 	bl	800125c <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fb1f 	bl	800125c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e1a8      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b28      	ldr	r3, [pc, #160]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4925      	ldr	r1, [pc, #148]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
 8001c4c:	e015      	b.n	8001c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ce0 <HAL_RCC_OscConfig+0x244>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff fb02 	bl	800125c <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5c:	f7ff fafe 	bl	800125c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e187      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d036      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d016      	beq.n	8001cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_RCC_OscConfig+0x248>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff fae2 	bl	800125c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fade 	bl	800125c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e167      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_RCC_OscConfig+0x240>)
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x200>
 8001cba:	e01b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cbc:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_RCC_OscConfig+0x248>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc2:	f7ff facb 	bl	800125c <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	e00e      	b.n	8001ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff fac7 	bl	800125c <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d907      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e150      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	42470000 	.word	0x42470000
 8001ce4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	4b88      	ldr	r3, [pc, #544]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ea      	bne.n	8001cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 8097 	beq.w	8001e30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b81      	ldr	r3, [pc, #516]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10f      	bne.n	8001d32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b7d      	ldr	r3, [pc, #500]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	4a7c      	ldr	r2, [pc, #496]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d22:	4b7a      	ldr	r3, [pc, #488]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d32:	4b77      	ldr	r3, [pc, #476]	@ (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d118      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3e:	4b74      	ldr	r3, [pc, #464]	@ (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a73      	ldr	r2, [pc, #460]	@ (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fa87 	bl	800125c <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d52:	f7ff fa83 	bl	800125c <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e10c      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	4b6a      	ldr	r3, [pc, #424]	@ (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x2ea>
 8001d78:	4b64      	ldr	r3, [pc, #400]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7c:	4a63      	ldr	r2, [pc, #396]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d84:	e01c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x324>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x30c>
 8001d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d92:	4a5e      	ldr	r2, [pc, #376]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d9a:	4b5c      	ldr	r3, [pc, #368]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x324>
 8001da8:	4b58      	ldr	r3, [pc, #352]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dac:	4a57      	ldr	r2, [pc, #348]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db4:	4b55      	ldr	r3, [pc, #340]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db8:	4a54      	ldr	r2, [pc, #336]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001dba:	f023 0304 	bic.w	r3, r3, #4
 8001dbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d015      	beq.n	8001df4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7ff fa48 	bl	800125c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fa44 	bl	800125c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e0cb      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de6:	4b49      	ldr	r3, [pc, #292]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0ee      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x334>
 8001df2:	e014      	b.n	8001e1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7ff fa32 	bl	800125c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fa2e 	bl	800125c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e0b5      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e12:	4b3e      	ldr	r3, [pc, #248]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ee      	bne.n	8001dfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e24:	4b39      	ldr	r3, [pc, #228]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	4a38      	ldr	r2, [pc, #224]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001e2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80a1 	beq.w	8001f7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e3a:	4b34      	ldr	r3, [pc, #208]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d05c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d141      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4e:	4b31      	ldr	r3, [pc, #196]	@ (8001f14 <HAL_RCC_OscConfig+0x478>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fa02 	bl	800125c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff f9fe 	bl	800125c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e087      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6e:	4b27      	ldr	r3, [pc, #156]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	019b      	lsls	r3, r3, #6
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	3b01      	subs	r3, #1
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	491b      	ldr	r1, [pc, #108]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <HAL_RCC_OscConfig+0x478>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7ff f9d7 	bl	800125c <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7ff f9d3 	bl	800125c <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e05c      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x416>
 8001ed0:	e054      	b.n	8001f7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <HAL_RCC_OscConfig+0x478>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f9c0 	bl	800125c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff f9bc 	bl	800125c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e045      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef2:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_RCC_OscConfig+0x470>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x444>
 8001efe:	e03d      	b.n	8001f7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e038      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40007000 	.word	0x40007000
 8001f14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_RCC_OscConfig+0x4ec>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d028      	beq.n	8001f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d121      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d11a      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d111      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	3b01      	subs	r3, #1
 8001f62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0cc      	b.n	800213a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b68      	ldr	r3, [pc, #416]	@ (8002144 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d90c      	bls.n	8001fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b65      	ldr	r3, [pc, #404]	@ (8002144 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b63      	ldr	r3, [pc, #396]	@ (8002144 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0b8      	b.n	800213a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe0:	4b59      	ldr	r3, [pc, #356]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4a58      	ldr	r2, [pc, #352]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff8:	4b53      	ldr	r3, [pc, #332]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4a52      	ldr	r2, [pc, #328]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002004:	4b50      	ldr	r3, [pc, #320]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	494d      	ldr	r1, [pc, #308]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d044      	beq.n	80020ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	4b47      	ldr	r3, [pc, #284]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d119      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e07f      	b.n	800213a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d003      	beq.n	800204a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002046:	2b03      	cmp	r3, #3
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204a:	4b3f      	ldr	r3, [pc, #252]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e06f      	b.n	800213a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205a:	4b3b      	ldr	r3, [pc, #236]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e067      	b.n	800213a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206a:	4b37      	ldr	r3, [pc, #220]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f023 0203 	bic.w	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4934      	ldr	r1, [pc, #208]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	4313      	orrs	r3, r2
 800207a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800207c:	f7ff f8ee 	bl	800125c <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	e00a      	b.n	800209a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002084:	f7ff f8ea 	bl	800125c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e04f      	b.n	800213a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209a:	4b2b      	ldr	r3, [pc, #172]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 020c 	and.w	r2, r3, #12
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d1eb      	bne.n	8002084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ac:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <HAL_RCC_ClockConfig+0x1b8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d20c      	bcs.n	80020d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b22      	ldr	r3, [pc, #136]	@ (8002144 <HAL_RCC_ClockConfig+0x1b8>)
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c2:	4b20      	ldr	r3, [pc, #128]	@ (8002144 <HAL_RCC_ClockConfig+0x1b8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e032      	b.n	800213a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e0:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4916      	ldr	r1, [pc, #88]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020fe:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	490e      	ldr	r1, [pc, #56]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002112:	f000 f821 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002116:	4602      	mov	r2, r0
 8002118:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	490a      	ldr	r1, [pc, #40]	@ (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	5ccb      	ldrb	r3, [r1, r3]
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	4a09      	ldr	r2, [pc, #36]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff f84e 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023c00 	.word	0x40023c00
 8002148:	40023800 	.word	0x40023800
 800214c:	080032dc 	.word	0x080032dc
 8002150:	20000000 	.word	0x20000000
 8002154:	20000004 	.word	0x20000004

08002158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800215c:	b090      	sub	sp, #64	@ 0x40
 800215e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002170:	4b59      	ldr	r3, [pc, #356]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d00d      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x40>
 800217c:	2b08      	cmp	r3, #8
 800217e:	f200 80a1 	bhi.w	80022c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x34>
 8002186:	2b04      	cmp	r3, #4
 8002188:	d003      	beq.n	8002192 <HAL_RCC_GetSysClockFreq+0x3a>
 800218a:	e09b      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800218c:	4b53      	ldr	r3, [pc, #332]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x184>)
 800218e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002190:	e09b      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002192:	4b53      	ldr	r3, [pc, #332]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002194:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002196:	e098      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002198:	4b4f      	ldr	r3, [pc, #316]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a2:	4b4d      	ldr	r3, [pc, #308]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d028      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ae:	4b4a      	ldr	r3, [pc, #296]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	099b      	lsrs	r3, r3, #6
 80021b4:	2200      	movs	r2, #0
 80021b6:	623b      	str	r3, [r7, #32]
 80021b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021c0:	2100      	movs	r1, #0
 80021c2:	4b47      	ldr	r3, [pc, #284]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021c4:	fb03 f201 	mul.w	r2, r3, r1
 80021c8:	2300      	movs	r3, #0
 80021ca:	fb00 f303 	mul.w	r3, r0, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	4a43      	ldr	r2, [pc, #268]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021d2:	fba0 1202 	umull	r1, r2, r0, r2
 80021d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021d8:	460a      	mov	r2, r1
 80021da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80021dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021de:	4413      	add	r3, r2
 80021e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021e4:	2200      	movs	r2, #0
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	61fa      	str	r2, [r7, #28]
 80021ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80021f2:	f7fd ffe9 	bl	80001c8 <__aeabi_uldivmod>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4613      	mov	r3, r2
 80021fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021fe:	e053      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002200:	4b35      	ldr	r3, [pc, #212]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	2200      	movs	r2, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	617a      	str	r2, [r7, #20]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002212:	f04f 0b00 	mov.w	fp, #0
 8002216:	4652      	mov	r2, sl
 8002218:	465b      	mov	r3, fp
 800221a:	f04f 0000 	mov.w	r0, #0
 800221e:	f04f 0100 	mov.w	r1, #0
 8002222:	0159      	lsls	r1, r3, #5
 8002224:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002228:	0150      	lsls	r0, r2, #5
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	ebb2 080a 	subs.w	r8, r2, sl
 8002232:	eb63 090b 	sbc.w	r9, r3, fp
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002242:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002246:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800224a:	ebb2 0408 	subs.w	r4, r2, r8
 800224e:	eb63 0509 	sbc.w	r5, r3, r9
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	00eb      	lsls	r3, r5, #3
 800225c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002260:	00e2      	lsls	r2, r4, #3
 8002262:	4614      	mov	r4, r2
 8002264:	461d      	mov	r5, r3
 8002266:	eb14 030a 	adds.w	r3, r4, sl
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	eb45 030b 	adc.w	r3, r5, fp
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800227e:	4629      	mov	r1, r5
 8002280:	028b      	lsls	r3, r1, #10
 8002282:	4621      	mov	r1, r4
 8002284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002288:	4621      	mov	r1, r4
 800228a:	028a      	lsls	r2, r1, #10
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002292:	2200      	movs	r2, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	60fa      	str	r2, [r7, #12]
 8002298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800229c:	f7fd ff94 	bl	80001c8 <__aeabi_uldivmod>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4613      	mov	r3, r2
 80022a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022a8:	4b0b      	ldr	r3, [pc, #44]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	3301      	adds	r3, #1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80022b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022c2:	e002      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x184>)
 80022c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3740      	adds	r7, #64	@ 0x40
 80022d0:	46bd      	mov	sp, r7
 80022d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	00f42400 	.word	0x00f42400
 80022e0:	017d7840 	.word	0x017d7840

080022e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e8:	4b03      	ldr	r3, [pc, #12]	@ (80022f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000000 	.word	0x20000000

080022fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002300:	f7ff fff0 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0a9b      	lsrs	r3, r3, #10
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4903      	ldr	r1, [pc, #12]	@ (8002320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40023800 	.word	0x40023800
 8002320:	080032ec 	.word	0x080032ec

08002324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e041      	b.n	80023ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fe2a 	bl	8000fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f000 faac 	bl	80028c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d001      	beq.n	80023dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e04e      	b.n	800247a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a23      	ldr	r2, [pc, #140]	@ (8002488 <HAL_TIM_Base_Start_IT+0xc4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d022      	beq.n	8002444 <HAL_TIM_Base_Start_IT+0x80>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002406:	d01d      	beq.n	8002444 <HAL_TIM_Base_Start_IT+0x80>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1f      	ldr	r2, [pc, #124]	@ (800248c <HAL_TIM_Base_Start_IT+0xc8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d018      	beq.n	8002444 <HAL_TIM_Base_Start_IT+0x80>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1e      	ldr	r2, [pc, #120]	@ (8002490 <HAL_TIM_Base_Start_IT+0xcc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d013      	beq.n	8002444 <HAL_TIM_Base_Start_IT+0x80>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1c      	ldr	r2, [pc, #112]	@ (8002494 <HAL_TIM_Base_Start_IT+0xd0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00e      	beq.n	8002444 <HAL_TIM_Base_Start_IT+0x80>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1b      	ldr	r2, [pc, #108]	@ (8002498 <HAL_TIM_Base_Start_IT+0xd4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d009      	beq.n	8002444 <HAL_TIM_Base_Start_IT+0x80>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a19      	ldr	r2, [pc, #100]	@ (800249c <HAL_TIM_Base_Start_IT+0xd8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d004      	beq.n	8002444 <HAL_TIM_Base_Start_IT+0x80>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a18      	ldr	r2, [pc, #96]	@ (80024a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d111      	bne.n	8002468 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b06      	cmp	r3, #6
 8002454:	d010      	beq.n	8002478 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002466:	e007      	b.n	8002478 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40010000 	.word	0x40010000
 800248c:	40000400 	.word	0x40000400
 8002490:	40000800 	.word	0x40000800
 8002494:	40000c00 	.word	0x40000c00
 8002498:	40010400 	.word	0x40010400
 800249c:	40014000 	.word	0x40014000
 80024a0:	40001800 	.word	0x40001800

080024a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6a1a      	ldr	r2, [r3, #32]
 80024c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10f      	bne.n	80024ec <HAL_TIM_Base_Stop_IT+0x48>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6a1a      	ldr	r2, [r3, #32]
 80024d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_TIM_Base_Stop_IT+0x48>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01b      	beq.n	8002566 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f06f 0202 	mvn.w	r2, #2
 8002536:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f999 	bl	8002884 <HAL_TIM_IC_CaptureCallback>
 8002552:	e005      	b.n	8002560 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f98b 	bl	8002870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f99c 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01b      	beq.n	80025b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f06f 0204 	mvn.w	r2, #4
 8002582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f973 	bl	8002884 <HAL_TIM_IC_CaptureCallback>
 800259e:	e005      	b.n	80025ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f965 	bl	8002870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f976 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01b      	beq.n	80025fe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f06f 0208 	mvn.w	r2, #8
 80025ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2204      	movs	r2, #4
 80025d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f94d 	bl	8002884 <HAL_TIM_IC_CaptureCallback>
 80025ea:	e005      	b.n	80025f8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f93f 	bl	8002870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f950 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01b      	beq.n	800264a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f06f 0210 	mvn.w	r2, #16
 800261a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2208      	movs	r2, #8
 8002620:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f927 	bl	8002884 <HAL_TIM_IC_CaptureCallback>
 8002636:	e005      	b.n	8002644 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f919 	bl	8002870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f92a 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00c      	beq.n	800266e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f06f 0201 	mvn.w	r2, #1
 8002666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7fe fd49 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00c      	beq.n	8002692 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800268a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fadd 	bl	8002c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00c      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f8fb 	bl	80028ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00c      	beq.n	80026da <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f06f 0220 	mvn.w	r2, #32
 80026d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 faaf 	bl	8002c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_ConfigClockSource+0x1c>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e0b4      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x186>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800271c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002724:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002736:	d03e      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0xd4>
 8002738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800273c:	f200 8087 	bhi.w	800284e <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002744:	f000 8086 	beq.w	8002854 <HAL_TIM_ConfigClockSource+0x172>
 8002748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800274c:	d87f      	bhi.n	800284e <HAL_TIM_ConfigClockSource+0x16c>
 800274e:	2b70      	cmp	r3, #112	@ 0x70
 8002750:	d01a      	beq.n	8002788 <HAL_TIM_ConfigClockSource+0xa6>
 8002752:	2b70      	cmp	r3, #112	@ 0x70
 8002754:	d87b      	bhi.n	800284e <HAL_TIM_ConfigClockSource+0x16c>
 8002756:	2b60      	cmp	r3, #96	@ 0x60
 8002758:	d050      	beq.n	80027fc <HAL_TIM_ConfigClockSource+0x11a>
 800275a:	2b60      	cmp	r3, #96	@ 0x60
 800275c:	d877      	bhi.n	800284e <HAL_TIM_ConfigClockSource+0x16c>
 800275e:	2b50      	cmp	r3, #80	@ 0x50
 8002760:	d03c      	beq.n	80027dc <HAL_TIM_ConfigClockSource+0xfa>
 8002762:	2b50      	cmp	r3, #80	@ 0x50
 8002764:	d873      	bhi.n	800284e <HAL_TIM_ConfigClockSource+0x16c>
 8002766:	2b40      	cmp	r3, #64	@ 0x40
 8002768:	d058      	beq.n	800281c <HAL_TIM_ConfigClockSource+0x13a>
 800276a:	2b40      	cmp	r3, #64	@ 0x40
 800276c:	d86f      	bhi.n	800284e <HAL_TIM_ConfigClockSource+0x16c>
 800276e:	2b30      	cmp	r3, #48	@ 0x30
 8002770:	d064      	beq.n	800283c <HAL_TIM_ConfigClockSource+0x15a>
 8002772:	2b30      	cmp	r3, #48	@ 0x30
 8002774:	d86b      	bhi.n	800284e <HAL_TIM_ConfigClockSource+0x16c>
 8002776:	2b20      	cmp	r3, #32
 8002778:	d060      	beq.n	800283c <HAL_TIM_ConfigClockSource+0x15a>
 800277a:	2b20      	cmp	r3, #32
 800277c:	d867      	bhi.n	800284e <HAL_TIM_ConfigClockSource+0x16c>
 800277e:	2b00      	cmp	r3, #0
 8002780:	d05c      	beq.n	800283c <HAL_TIM_ConfigClockSource+0x15a>
 8002782:	2b10      	cmp	r3, #16
 8002784:	d05a      	beq.n	800283c <HAL_TIM_ConfigClockSource+0x15a>
 8002786:	e062      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002798:	f000 f9b2 	bl	8002b00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	609a      	str	r2, [r3, #8]
      break;
 80027b4:	e04f      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027c6:	f000 f99b 	bl	8002b00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027d8:	609a      	str	r2, [r3, #8]
      break;
 80027da:	e03c      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e8:	461a      	mov	r2, r3
 80027ea:	f000 f90f 	bl	8002a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2150      	movs	r1, #80	@ 0x50
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 f968 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 80027fa:	e02c      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002808:	461a      	mov	r2, r3
 800280a:	f000 f92e 	bl	8002a6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2160      	movs	r1, #96	@ 0x60
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f958 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 800281a:	e01c      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002828:	461a      	mov	r2, r3
 800282a:	f000 f8ef 	bl	8002a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2140      	movs	r1, #64	@ 0x40
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f948 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 800283a:	e00c      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f000 f93f 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 800284c:	e003      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
      break;
 8002852:	e000      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002854:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a43      	ldr	r2, [pc, #268]	@ (80029e0 <TIM_Base_SetConfig+0x120>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d013      	beq.n	8002900 <TIM_Base_SetConfig+0x40>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028de:	d00f      	beq.n	8002900 <TIM_Base_SetConfig+0x40>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a40      	ldr	r2, [pc, #256]	@ (80029e4 <TIM_Base_SetConfig+0x124>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00b      	beq.n	8002900 <TIM_Base_SetConfig+0x40>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a3f      	ldr	r2, [pc, #252]	@ (80029e8 <TIM_Base_SetConfig+0x128>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d007      	beq.n	8002900 <TIM_Base_SetConfig+0x40>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a3e      	ldr	r2, [pc, #248]	@ (80029ec <TIM_Base_SetConfig+0x12c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d003      	beq.n	8002900 <TIM_Base_SetConfig+0x40>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a3d      	ldr	r2, [pc, #244]	@ (80029f0 <TIM_Base_SetConfig+0x130>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d108      	bne.n	8002912 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a32      	ldr	r2, [pc, #200]	@ (80029e0 <TIM_Base_SetConfig+0x120>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d02b      	beq.n	8002972 <TIM_Base_SetConfig+0xb2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002920:	d027      	beq.n	8002972 <TIM_Base_SetConfig+0xb2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a2f      	ldr	r2, [pc, #188]	@ (80029e4 <TIM_Base_SetConfig+0x124>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d023      	beq.n	8002972 <TIM_Base_SetConfig+0xb2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a2e      	ldr	r2, [pc, #184]	@ (80029e8 <TIM_Base_SetConfig+0x128>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d01f      	beq.n	8002972 <TIM_Base_SetConfig+0xb2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a2d      	ldr	r2, [pc, #180]	@ (80029ec <TIM_Base_SetConfig+0x12c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01b      	beq.n	8002972 <TIM_Base_SetConfig+0xb2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a2c      	ldr	r2, [pc, #176]	@ (80029f0 <TIM_Base_SetConfig+0x130>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d017      	beq.n	8002972 <TIM_Base_SetConfig+0xb2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a2b      	ldr	r2, [pc, #172]	@ (80029f4 <TIM_Base_SetConfig+0x134>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <TIM_Base_SetConfig+0xb2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a2a      	ldr	r2, [pc, #168]	@ (80029f8 <TIM_Base_SetConfig+0x138>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00f      	beq.n	8002972 <TIM_Base_SetConfig+0xb2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a29      	ldr	r2, [pc, #164]	@ (80029fc <TIM_Base_SetConfig+0x13c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00b      	beq.n	8002972 <TIM_Base_SetConfig+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a28      	ldr	r2, [pc, #160]	@ (8002a00 <TIM_Base_SetConfig+0x140>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <TIM_Base_SetConfig+0xb2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a27      	ldr	r2, [pc, #156]	@ (8002a04 <TIM_Base_SetConfig+0x144>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d003      	beq.n	8002972 <TIM_Base_SetConfig+0xb2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a26      	ldr	r2, [pc, #152]	@ (8002a08 <TIM_Base_SetConfig+0x148>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d108      	bne.n	8002984 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0e      	ldr	r2, [pc, #56]	@ (80029e0 <TIM_Base_SetConfig+0x120>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d003      	beq.n	80029b2 <TIM_Base_SetConfig+0xf2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a10      	ldr	r2, [pc, #64]	@ (80029f0 <TIM_Base_SetConfig+0x130>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d103      	bne.n	80029ba <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f043 0204 	orr.w	r2, r3, #4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40010000 	.word	0x40010000
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800
 80029ec:	40000c00 	.word	0x40000c00
 80029f0:	40010400 	.word	0x40010400
 80029f4:	40014000 	.word	0x40014000
 80029f8:	40014400 	.word	0x40014400
 80029fc:	40014800 	.word	0x40014800
 8002a00:	40001800 	.word	0x40001800
 8002a04:	40001c00 	.word	0x40001c00
 8002a08:	40002000 	.word	0x40002000

08002a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f023 0201 	bic.w	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f023 030a 	bic.w	r3, r3, #10
 8002a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	621a      	str	r2, [r3, #32]
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b087      	sub	sp, #28
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f023 0210 	bic.w	r2, r3, #16
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	031b      	lsls	r3, r3, #12
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002aa6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	621a      	str	r2, [r3, #32]
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f043 0307 	orr.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	609a      	str	r2, [r3, #8]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	021a      	lsls	r2, r3, #8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	609a      	str	r2, [r3, #8]
}
 8002b34:	bf00      	nop
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e05a      	b.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a21      	ldr	r2, [pc, #132]	@ (8002c1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d022      	beq.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba4:	d01d      	beq.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d018      	beq.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00e      	beq.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a18      	ldr	r2, [pc, #96]	@ (8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d009      	beq.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a17      	ldr	r2, [pc, #92]	@ (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a15      	ldr	r2, [pc, #84]	@ (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d10c      	bne.n	8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40000800 	.word	0x40000800
 8002c28:	40000c00 	.word	0x40000c00
 8002c2c:	40010400 	.word	0x40010400
 8002c30:	40014000 	.word	0x40014000
 8002c34:	40001800 	.word	0x40001800

08002c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c60:	b084      	sub	sp, #16
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	f107 001c 	add.w	r0, r7, #28
 8002c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d123      	bne.n	8002cc2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002c8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ca2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d105      	bne.n	8002cb6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 faa0 	bl	80031fc <USB_CoreReset>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	e01b      	b.n	8002cfa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa94 	bl	80031fc <USB_CoreReset>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002cd8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cec:	e005      	b.n	8002cfa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002cfa:	7fbb      	ldrb	r3, [r7, #30]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d10b      	bne.n	8002d18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f043 0206 	orr.w	r2, r3, #6
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d24:	b004      	add	sp, #16
 8002d26:	4770      	bx	lr

08002d28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 0201 	bic.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d115      	bne.n	8002d98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002d78:	200a      	movs	r0, #10
 8002d7a:	f7fe fa7b 	bl	8001274 <HAL_Delay>
      ms += 10U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	330a      	adds	r3, #10
 8002d82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fa2b 	bl	80031e0 <USB_GetMode>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d01e      	beq.n	8002dce <USB_SetCurrentMode+0x84>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2bc7      	cmp	r3, #199	@ 0xc7
 8002d94:	d9f0      	bls.n	8002d78 <USB_SetCurrentMode+0x2e>
 8002d96:	e01a      	b.n	8002dce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d115      	bne.n	8002dca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002daa:	200a      	movs	r0, #10
 8002dac:	f7fe fa62 	bl	8001274 <HAL_Delay>
      ms += 10U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	330a      	adds	r3, #10
 8002db4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fa12 	bl	80031e0 <USB_GetMode>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <USB_SetCurrentMode+0x84>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2bc7      	cmp	r3, #199	@ 0xc7
 8002dc6:	d9f0      	bls.n	8002daa <USB_SetCurrentMode+0x60>
 8002dc8:	e001      	b.n	8002dce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e005      	b.n	8002dda <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2bc8      	cmp	r3, #200	@ 0xc8
 8002dd2:	d101      	bne.n	8002dd8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002de4:	b084      	sub	sp, #16
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e009      	b.n	8002e18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	3340      	adds	r3, #64	@ 0x40
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	3301      	adds	r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	2b0e      	cmp	r3, #14
 8002e1c:	d9f2      	bls.n	8002e04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d11c      	bne.n	8002e60 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e56:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e5e:	e00b      	b.n	8002e78 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e64:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e70:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2300      	movs	r3, #0
 8002e82:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e84:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d10d      	bne.n	8002ea8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d104      	bne.n	8002e9e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e94:	2100      	movs	r1, #0
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f968 	bl	800316c <USB_SetDevSpeed>
 8002e9c:	e008      	b.n	8002eb0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f963 	bl	800316c <USB_SetDevSpeed>
 8002ea6:	e003      	b.n	8002eb0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f95e 	bl	800316c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002eb0:	2110      	movs	r1, #16
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8fa 	bl	80030ac <USB_FlushTxFifo>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f924 	bl	8003110 <USB_FlushRxFifo>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2300      	movs	r3, #0
 8002edc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	e043      	b.n	8002f84 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f12:	d118      	bne.n	8002f46 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f26:	461a      	mov	r2, r3
 8002f28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e013      	b.n	8002f58 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e008      	b.n	8002f58 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f52:	461a      	mov	r2, r3
 8002f54:	2300      	movs	r3, #0
 8002f56:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f64:	461a      	mov	r2, r3
 8002f66:	2300      	movs	r3, #0
 8002f68:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f76:	461a      	mov	r2, r3
 8002f78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	3301      	adds	r3, #1
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f88:	461a      	mov	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d3b5      	bcc.n	8002efc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	e043      	b.n	800301e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fac:	d118      	bne.n	8002fe0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	e013      	b.n	8002ff2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e008      	b.n	8002ff2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fec:	461a      	mov	r2, r3
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ffe:	461a      	mov	r2, r3
 8003000:	2300      	movs	r3, #0
 8003002:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003010:	461a      	mov	r2, r3
 8003012:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003016:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	3301      	adds	r3, #1
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003022:	461a      	mov	r2, r3
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4293      	cmp	r3, r2
 8003028:	d3b5      	bcc.n	8002f96 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800303c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800304a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800304c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f043 0210 	orr.w	r2, r3, #16
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <USB_DevInit+0x2c4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800306c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f043 0208 	orr.w	r2, r3, #8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003080:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003084:	2b01      	cmp	r3, #1
 8003086:	d107      	bne.n	8003098 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003098:	7dfb      	ldrb	r3, [r7, #23]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030a4:	b004      	add	sp, #16
 80030a6:	4770      	bx	lr
 80030a8:	803c3800 	.word	0x803c3800

080030ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3301      	adds	r3, #1
 80030be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80030c6:	d901      	bls.n	80030cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e01b      	b.n	8003104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	daf2      	bge.n	80030ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	019b      	lsls	r3, r3, #6
 80030dc:	f043 0220 	orr.w	r2, r3, #32
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3301      	adds	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80030f0:	d901      	bls.n	80030f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e006      	b.n	8003104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d0f0      	beq.n	80030e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3301      	adds	r3, #1
 8003120:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003128:	d901      	bls.n	800312e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e018      	b.n	8003160 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	daf2      	bge.n	800311c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2210      	movs	r2, #16
 800313e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3301      	adds	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800314c:	d901      	bls.n	8003152 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e006      	b.n	8003160 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b10      	cmp	r3, #16
 800315c:	d0f0      	beq.n	8003140 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80031b8:	f023 0303 	bic.w	r3, r3, #3
 80031bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f003 0301 	and.w	r3, r3, #1
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3301      	adds	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003214:	d901      	bls.n	800321a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e022      	b.n	8003260 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	daf2      	bge.n	8003208 <USB_CoreReset+0xc>

  count = 10U;
 8003222:	230a      	movs	r3, #10
 8003224:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8003226:	e002      	b.n	800322e <USB_CoreReset+0x32>
  {
    count--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3b01      	subs	r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f9      	bne.n	8003228 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f043 0201 	orr.w	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3301      	adds	r3, #1
 8003244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800324c:	d901      	bls.n	8003252 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e006      	b.n	8003260 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d0f0      	beq.n	8003240 <USB_CoreReset+0x44>

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <memset>:
 800326c:	4402      	add	r2, r0
 800326e:	4603      	mov	r3, r0
 8003270:	4293      	cmp	r3, r2
 8003272:	d100      	bne.n	8003276 <memset+0xa>
 8003274:	4770      	bx	lr
 8003276:	f803 1b01 	strb.w	r1, [r3], #1
 800327a:	e7f9      	b.n	8003270 <memset+0x4>

0800327c <__libc_init_array>:
 800327c:	b570      	push	{r4, r5, r6, lr}
 800327e:	4d0d      	ldr	r5, [pc, #52]	@ (80032b4 <__libc_init_array+0x38>)
 8003280:	4c0d      	ldr	r4, [pc, #52]	@ (80032b8 <__libc_init_array+0x3c>)
 8003282:	1b64      	subs	r4, r4, r5
 8003284:	10a4      	asrs	r4, r4, #2
 8003286:	2600      	movs	r6, #0
 8003288:	42a6      	cmp	r6, r4
 800328a:	d109      	bne.n	80032a0 <__libc_init_array+0x24>
 800328c:	4d0b      	ldr	r5, [pc, #44]	@ (80032bc <__libc_init_array+0x40>)
 800328e:	4c0c      	ldr	r4, [pc, #48]	@ (80032c0 <__libc_init_array+0x44>)
 8003290:	f000 f818 	bl	80032c4 <_init>
 8003294:	1b64      	subs	r4, r4, r5
 8003296:	10a4      	asrs	r4, r4, #2
 8003298:	2600      	movs	r6, #0
 800329a:	42a6      	cmp	r6, r4
 800329c:	d105      	bne.n	80032aa <__libc_init_array+0x2e>
 800329e:	bd70      	pop	{r4, r5, r6, pc}
 80032a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a4:	4798      	blx	r3
 80032a6:	3601      	adds	r6, #1
 80032a8:	e7ee      	b.n	8003288 <__libc_init_array+0xc>
 80032aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ae:	4798      	blx	r3
 80032b0:	3601      	adds	r6, #1
 80032b2:	e7f2      	b.n	800329a <__libc_init_array+0x1e>
 80032b4:	080032fc 	.word	0x080032fc
 80032b8:	080032fc 	.word	0x080032fc
 80032bc:	080032fc 	.word	0x080032fc
 80032c0:	08003300 	.word	0x08003300

080032c4 <_init>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	bf00      	nop
 80032c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ca:	bc08      	pop	{r3}
 80032cc:	469e      	mov	lr, r3
 80032ce:	4770      	bx	lr

080032d0 <_fini>:
 80032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d2:	bf00      	nop
 80032d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d6:	bc08      	pop	{r3}
 80032d8:	469e      	mov	lr, r3
 80032da:	4770      	bx	lr
